<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Website – Documentation</title>
    <link>/docs/</link>
    <description>Recent content in Documentation on Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Jul 2020 16:59:42 +0800</lastBuildDate>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Overview</title>
      <link>/docs/monitoring/prometheus/introduction/overview/</link>
      <pubDate>Sat, 25 Jul 2020 13:34:21 +0800</pubDate>
      
      <guid>/docs/monitoring/prometheus/introduction/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;什么是-prometheus&#34;&gt;什么是 Prometheus？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus&#34;&gt;Prometheus&lt;/a&gt; 是最初在 &lt;a href=&#34;https://soundcloud.com/&#34;&gt;SoundCloud&lt;/a&gt; 上构建的开源系统监视和警报工具包。自 2012 年成立以来，许多公司和组织都采用了 Prometheus，该项目拥有非常活跃的开发人员和用户&lt;a href=&#34;https://prometheus.io/community&#34;&gt;社区&lt;/a&gt;。现在，它是一个独立的开源项目，并且独立于任何公司进行维护。为了强调这一点并阐明项目的治理结构，Prometheus 在 2016 年加入了 &lt;a href=&#34;https://cncf.io/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; ，这是继 Kubernetes 之后的第二个托管项目。有关 Prometheus 的详细说明，请参见 &lt;a href=&#34;https://prometheus.io/docs/introduction/media/&#34;&gt;media&lt;/a&gt; 部分中的资源链接。&lt;/p&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;p&gt;Prometheus 的主要特性是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个多维&lt;a href=&#34;https://prometheus.io/docs/concepts/data_model/&#34;&gt;数据模型&lt;/a&gt;，其中包含通过指标名称和键/值对标识的时间序列数据。&lt;/li&gt;
&lt;li&gt;PromQL，一种&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34;&gt;灵活的查询语言&lt;/a&gt;，可利用此维度。&lt;/li&gt;
&lt;li&gt;不依赖分布式存储；单服务器节点是自治的。&lt;/li&gt;
&lt;li&gt;时间序列收集通过 HTTP 上的拉模型进行。&lt;/li&gt;
&lt;li&gt;通过中间网关支持&lt;a href=&#34;https://prometheus.io/docs/instrumenting/pushing/&#34;&gt;推送时间序列&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;通过服务发现或静态配置发现目标。&lt;/li&gt;
&lt;li&gt;支持多种模式的图形和仪表板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;组件&#34;&gt;组件&lt;/h3&gt;
&lt;p&gt;Prometheus 生态系统由多个组件组成，其中许多是可选的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要的 &lt;a href=&#34;https://github.com/prometheus/prometheus&#34;&gt;Prometheus server&lt;/a&gt; 用于搜集并存储时间序列数据。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/instrumenting/clientlibs/&#34;&gt;client libraries&lt;/a&gt; 用于检测应用程序代码。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prometheus/pushgateway&#34;&gt;push gateway&lt;/a&gt; 用于支持短期工作&lt;/li&gt;
&lt;li&gt;服务专用的 &lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/&#34;&gt;exporters&lt;/a&gt;，比如用于 HAProxy、StatsD、Graphite等服务。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prometheus/alertmanager&#34;&gt;alertmanager&lt;/a&gt; 用于处理警报。&lt;/li&gt;
&lt;li&gt;各种支持工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数 Prometheus 组件都是用 &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; 编写的，因此易于构建和部署为静态二进制文件。&lt;/p&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;下图说明了 Prometheus 的体系结构及其某些生态系统组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://prometheus.io/assets/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;Prometheus 从已检测作业中搜集指标，或是直接地，或是通过中间推送网关处理短期工作。它将所有搜集的样品存储在本地，并对这些数据运行规则，以从现有数据中汇总和记录新时间序列，或生成警报。&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; 或其他 API 使用者可以用来可视化收集的数据。&lt;/p&gt;
&lt;h2 id=&#34;什么时候适合&#34;&gt;什么时候适合？&lt;/h2&gt;
&lt;p&gt;Prometheus 可以很好地记录任何纯数字时间序列。它既适用于以机器为中心的监控，也适用于高度动态的面向服务的体系结构的监控。在微服务世界中，它对多维数据收集和查询的支持是一种特别的优势。&lt;/p&gt;
&lt;p&gt;Prometheus 专为可靠性而设计，成为您要使用的系统，该系统帮助您在中断期间能够快速诊断问题。每个 Prometheus server 都是独立的，而不依赖于网络存储或其他远程服务。当基础结构的其他部分损坏时，您可以依靠它，并且无需设置广泛的基础结构即可使用它。&lt;/p&gt;
&lt;h2 id=&#34;什么时候不适合&#34;&gt;什么时候不适合？&lt;/h2&gt;
&lt;p&gt;Prometheus 重视可靠性。即使在故障情况下，您始终可以查看有关系统的可用统计信息。如果您需要 100％ 的准确性（例如按请求计费），则 Prometheus 并不是一个很好的选择，因为所收集的数据可能不够详细和完整。在这种情况下，最好使用其他系统来收集和分析数据以进行计费，并使用 Prometheus 进行其余的监视。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: What is Envoy</title>
      <link>/docs/cloudnative/envoy/introduction/what-is-envoy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/cloudnative/envoy/introduction/what-is-envoy/</guid>
      <description>
        
        
        &lt;p&gt;Envoy 是 L7 代理和通信总线，专为面向大型现代服务的体系结构而设计。该项目是基于以下信念而诞生的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网络对应用程序应该是透明的。当确实发生网络和应用程序问题时，应该容易确定问题的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上，实现上述目标非常困难。 Envoy 尝试通过提供以下高级功能来做到这一点：&lt;/p&gt;
&lt;p&gt;**进程外架构：**Envoy 是一个自包含的进程，被设计为与每个应用程序服务器一起运行。所有的 Envoy 组成一个透明的通信网格，每个应用程序在其中都与 localhost 之间发送和接收消息，并且不知道网络拓扑。与传统的库实现服务到服务通信方法相比，进程外架构具有两个实质性的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy 可与任何应用程序语言一起工作。单个 Envoy 部署可以在 Java、C ++、Go、PHP、Python 等之间形成网格。面向服务的架构（SOA）使用多种应用程序框架和语言变得越来越普遍。Envoy 透明地弥合了其中的差距。&lt;/li&gt;
&lt;li&gt;任何使用大型面向服务的架构的人都知道，部署库升级可能会非常痛苦。Envoy 可以透明地在整个基础架构中快速部署和升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Modern C++11 code base:&lt;/strong&gt; Envoy 用 C++11 编写。选择原生代码是因为我们认为应尽可能避免使用 Envoy 之类的架构组件。现代应用开发人员已经处理了因共享云环境中的部署而难以推理的尾部延迟，以及使用效率很高但性能不是很好的语言，例如 PHP、Python、Ruby、Scala 等。原生代码通常提供出色的延迟属性，不会给已经令人困惑的情况带来额外的混乱。与其他用 C 编写的原生代码代理解决方案不同，C++11 提供了出色的开发人员生产力和性能。&lt;/p&gt;
&lt;p&gt;**L3/L4 过滤器架构：**Envoy 的核心是 L3/L4网络代理。可插拔的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listeners/network_filters#arch-overview-network-filters&#34;&gt;过滤器&lt;/a&gt; 链机制允许写入过滤器以执行不同的 TCP 代理任务，并将其插入主服务器。已经写好了过滤器来支持各种任务，例如原始 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listeners/tcp_proxy#arch-overview-tcp-proxy&#34;&gt;TCP 代理&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#arch-overview-http-conn-man&#34;&gt;HTTP 代理&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ssl#arch-overview-ssl-auth-filter&#34;&gt;TLS 客户端证书认证&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP L7 过滤器架构：&lt;/strong&gt; HTTP 是现代应用架构的关键组件，Envoy &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_filters#arch-overview-http-filters&#34;&gt;支持&lt;/a&gt;额外的 HTTP L7 过滤器层。HTTP 过滤器可以插入 HTTP 连接管理子系统中，该子系统执行不同的任务，例如&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/buffer_filter#config-http-filters-buffer&#34;&gt;缓冲&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting#arch-overview-global-rate-limit&#34;&gt;速率限制&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing&#34;&gt;路由/转发&lt;/a&gt;、嗅探 Amazon 的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/dynamo#arch-overview-dynamo&#34;&gt;DynamoDB&lt;/a&gt; 等。&lt;/p&gt;
&lt;p&gt;**一流的 HTTP/2 支持：**在 HTTP 模式下运行时，Envoy 支持 HTTP/1.1 和 HTTP/2。Envoy 可以在两个方向上充当透明的 HTTP/1.1 到 HTTP/2 代理。这意味着可以桥接 HTTP/1.1 和 HTTP/2 客户端与目标服务器的任何组合。推荐的服务到服务配置是在所有 Envoy 之间使用 HTTP/2 来创建持久连接的网格，该请求和响应可以多路复用。由于 SPDY 协议正在逐步淘汰，Envoy 不支持 SPDY。&lt;/p&gt;
&lt;p&gt;**HTTP L7 路由：**在 HTTP 模式下运行时，Envoy 支持&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing&#34;&gt;路由&lt;/a&gt;子系统，该子系统能够基于路径、权限、内容类型、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/runtime#arch-overview-runtime&#34;&gt;运行时&lt;/a&gt;值等来路由和重定向请求。当使用 Envoy 作为前端/边缘代理时，此功能最有用，但在构建服务到服务网格的服务时也可以利用此功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gRPC 支持：&lt;/strong&gt;&lt;a href=&#34;https://www.grpc.io/&#34;&gt;gRPC&lt;/a&gt; 是 Google 的 RPC框架，使用 HTTP/2 作为基础的多路复用传输。Envoy &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/grpc#arch-overview-grpc&#34;&gt;支持&lt;/a&gt;所有 HTTP/2 功能，这些功能必须用作 gRPC 请求和响应的路由和负载平衡基础。这两个系统是非常互补的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MongoDB L7 支持：&lt;/strong&gt;&lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; 是在现代 Web 应用程序中使用的流行数据库。Envoy &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/mongo#arch-overview-mongo&#34;&gt;支持&lt;/a&gt; L7 嗅探，统计信息生成和 MongoDB 连接的日志记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DynamoDB L7支持：&lt;/strong&gt;&lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;DynamoDB&lt;/a&gt; 是 Amazon 托管的键/值 NOSQL 数据存储。 Envoy &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/dynamo#arch-overview-dynamo&#34;&gt;支持&lt;/a&gt; DynamoDB 连接的 L7 嗅探和统计信息生成。&lt;/p&gt;
&lt;p&gt;**服务发现和动态配置：**Envoy 可选地使用一组分层的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration#arch-overview-dynamic-config&#34;&gt;动态配置 API&lt;/a&gt; 进行集中管理。这些层为 Envoy 提供有关以下方面的动态更新：后端集群中的主机，后端集群本身，HTTP 路由，侦听套接字和加密材料。对于更简单的部署，后端主机发现可以&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-strict-dns&#34;&gt;通过 DNS 解析&lt;/a&gt;（甚至&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-static&#34;&gt;完全跳过&lt;/a&gt;）来完成，而将其他层替换为静态配置文件。&lt;/p&gt;
&lt;p&gt;**健康检查：**构建 Envoy 网格的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-eventually-consistent&#34;&gt;推荐&lt;/a&gt;方法是将服务发现视为最终一致的过程。Envoy 包括&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/health_checking#arch-overview-health-checking&#34;&gt;健康检查&lt;/a&gt;子系统，该子系统可以有选择地对上游服务集群执行主动健康检查。然后，Envoy 使用服务发现和健康检查信息的结合来确定健康的负载均衡目标。Envoy 还通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection&#34;&gt;异常值检测&lt;/a&gt;子系统支持被动健康检查。&lt;/p&gt;
&lt;p&gt;**高级负载均衡：**分布式系统中不同组件之间的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview#arch-overview-load-balancing&#34;&gt;负载均衡&lt;/a&gt;是一个复杂的问题。因为 Envoy 是一个自包含的代理而不是一个库，所以它能够在一个地方实现高级负载均衡技术，并使任何应用程序都可以访问它们。目前，Envoy 包括对&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing-retry&#34;&gt;自动重试&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking#arch-overview-circuit-break&#34;&gt;断路&lt;/a&gt;、通过外部速率限制服务进行&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting#arch-overview-global-rate-limit&#34;&gt;全局速率限制&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-requestmirrorpolicy&#34;&gt;请求屏蔽&lt;/a&gt;和&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection&#34;&gt;异常检测&lt;/a&gt;的支持。计划为请求竞赛提供未来的支持。&lt;/p&gt;
&lt;p&gt;**前端/边缘代理支持：**尽管 Envoy 最初主要被设计为服务到服务的通信系统，但在边缘使用相同的软件会有所帮助（可观察性，管理，相同的服务发现和负载平衡算法等）。Envoy 包含足够的功能，使其可以用作大多数现代 Web 应用程序用例的边缘代理。这包括 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ssl#arch-overview-ssl&#34;&gt;TLS&lt;/a&gt; 终止，HTTP/1.1 和 HTTP/2 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#arch-overview-http-protocols&#34;&gt;支持&lt;/a&gt;以及 HTTP L7 路由。&lt;/p&gt;
&lt;p&gt;**一流的可观察性：**如上所述，Envoy 的主要目标是使网络透明。但是，在网络级别和应用程序级别都会发生问题。 Envoy 包括对所有子系统的强大的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/statistics#arch-overview-statistics&#34;&gt;统计&lt;/a&gt;支持。&lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;statsd&lt;/a&gt;（和兼容的提供程序）是当前受支持的统计接收器，尽管插入另一个并不困难。可以通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/operations/admin#operations-admin-interface&#34;&gt;管理&lt;/a&gt;端口查看统计信息。 Envoy 还支持通过第三方提供商进行分布式跟踪。&lt;/p&gt;
&lt;h2 id=&#34;设计目标&#34;&gt;设计目标&lt;/h2&gt;
&lt;p&gt;关于代码本身的设计目标的简短说明：尽管Envoy绝不慢（我们花了很多时间来优化某些快速路径），但是代码的编写是模块化的，易于测试，而不是追求最大的绝对性能。我们认为，这是一种更有效的时间利用方式，因为典型的部署将与语言和运行时同时出现，速度降低许多倍，而内存使用却增加许多倍。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: First Steps</title>
      <link>/docs/monitoring/prometheus/introduction/first-steps/</link>
      <pubDate>Sat, 25 Jul 2020 15:01:08 +0800</pubDate>
      
      <guid>/docs/monitoring/prometheus/introduction/first-steps/</guid>
      <description>
        
        
        &lt;p&gt;欢迎来到 Prometheus！Prometheus 是一个监控平台，它通过在这些目标上搜集指标 HTTP 端点来从被监视的目标收集指标数据。本指南将向您展示如何安装、配置和使用 Prometheus 监控我们的第一个资源。您将下载，安装并运行 Prometheus。您还将下载并安装 exporter，这些工具可在主机和服务上暴露时间序列数据。我们的第一个 exporter 将是 Prometheus 本身，它提供了关于内存使用，垃圾回收等各种主机级别的指标。&lt;/p&gt;
&lt;h2 id=&#34;下载-prometheus&#34;&gt;下载 Prometheus&lt;/h2&gt;
&lt;p&gt;为您的平台&lt;a href=&#34;https://prometheus.io/download&#34;&gt;下载最新版本&lt;/a&gt;的 Prometheus，然后解压缩它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xvfz prometheus-*.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; prometheus-*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Prometheus server 是一个称为 &lt;code&gt;prometheus&lt;/code&gt;（或 &lt;code&gt;prometheus.exe&lt;/code&gt; 在 Microsoft Windows上）的二进制文件。我们可以运行二进制文件并通过传递 &lt;code&gt;--help&lt;/code&gt; 标志来查看有关其选项的帮助。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./prometheus --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;usage: prometheus &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&amp;lt;flags&amp;gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The Prometheus monitoring server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在启动 Prometheus 之前，让我们对其进行配置。&lt;/p&gt;
&lt;h2 id=&#34;配置-prometheus&#34;&gt;配置 Prometheus&lt;/h2&gt;
&lt;p&gt;Prometheus 配置为 &lt;a href=&#34;http://www.yaml.org/start.html&#34;&gt;YAML&lt;/a&gt; 格式。 Prometheus 下载包附带了示例配置在一个名为 &lt;code&gt;prometheus.yml&lt;/code&gt; 的文件中，这个文件是开始的好地方。&lt;/p&gt;
&lt;p&gt;我们删除了示例文件中的大多数注释，以使其更加简洁（注释是带有 &lt;code&gt;#&lt;/code&gt; 前缀的行）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;global&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;scrape_interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;15s&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;evaluation_interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;15s&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;rule_files&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - &amp;#34;first.rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - &amp;#34;second.rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;scrape_configs&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;job_name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;prometheus&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;static_configs&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;targets&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;localhost:9090&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例配置文件中包含三个配置块：&lt;code&gt;global&lt;/code&gt;、&lt;code&gt;rule_files&lt;/code&gt; 和 &lt;code&gt;scrape_configs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;global&lt;/code&gt; 控制 Prometheus server 的全局配置。我们目前有两个选项。首先，&lt;code&gt;scrape_interval&lt;/code&gt; 控制 Prometheus 多久搜集一次目标。您可以为单个目标覆盖此选项。在这个例子中，全局设置是每 15 秒搜集一次。&lt;code&gt;evaluation_interval&lt;/code&gt; 选项控制 Prometheus 多久评估一次 rule。Prometheus 使用 rule 来创建新的时间序列并生成警报。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rule_files&lt;/code&gt; 块指定我们要 Prometheus server 加载的任何规则的位置。目前，我们还没有任何规则。&lt;/p&gt;
&lt;p&gt;最后一块 &lt;code&gt;scrape_configs&lt;/code&gt; 控制 Prometheus 监控哪些资源。由于 Prometheus 还将有关自身的数据公开为 HTTP 端点，因此它可以抓取并监视其自身的运行状况。在默认配置中，有一个名为 &lt;code&gt;prometheus&lt;/code&gt; 的作业，它会抓取 Prometheus server 公开的时间序列数据。该作业包含了单个静态配置的目标：&lt;code&gt;&#39;localhost:9090&#39;&lt;/code&gt;。Prometheus 希望指标在目标的 &lt;code&gt;/metrics&lt;/code&gt; 路径上是可用的。因此，此默认作业是通过以下网址进行抓取：http://localhost:9090/metrics。&lt;/p&gt;
&lt;p&gt;返回的时间序列数据将详细说明 Prometheus 服务器的状态和性能。&lt;/p&gt;
&lt;p&gt;有关配置选项的完整说明，请参阅&lt;a href=&#34;https://prometheus.io/docs/operating/configuration&#34;&gt;配置文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;启动-prometheus&#34;&gt;启动 Prometheus&lt;/h2&gt;
&lt;p&gt;要使用我们新创建的配置文件启动 Prometheus，切换到包含 Prometheus 二进制文件的目录并运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./prometheus --config.file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;prometheus.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Prometheus 将会启动。您还应该能够在 &lt;a href=&#34;http://localhost:9090/&#34;&gt;http://localhost:9090&lt;/a&gt; 上浏览到有关其自身的状态页。给它大约 30 秒的时间，以从其自己的 HTTP 指标端点收集有关自身的数据。&lt;/p&gt;
&lt;p&gt;您还可以通过导航到它自己的指标端点：http://localhost:9090/metrics 来验证 Prometheus 是否正在提供有关其自身的指标。&lt;/p&gt;
&lt;h2 id=&#34;使用表达式浏览器&#34;&gt;使用表达式浏览器&lt;/h2&gt;
&lt;p&gt;让我们尝试查看 Prometheus 收集到的有关自身的一些数据。要使用 Prometheus 的内置表达式浏览器，请导航至 http://localhost:9090/graph 并在 &amp;ldquo;Graph&amp;rdquo; 选项卡中选择 &amp;ldquo;Console&amp;rdquo; 视图。&lt;/p&gt;
&lt;p&gt;正如您可以从 http://localhost:9090/metrics 收集的那样，Prometheus 导出的有关其自身的一个指标称为 &lt;code&gt;promhttp_metric_handler_requests_total&lt;/code&gt; （Prometheus server 已处理的 &lt;code&gt;/metrics&lt;/code&gt; 请求总数）。继续并将以下内容输入到表达式控制台中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;promhttp_metric_handler_requests_total
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这应该返回一些不同的时间序列（以及每个时间序列的最新值），所有时间序列的指标名称均为 &lt;code&gt;promhttp_metric_handler_requests_total&lt;/code&gt;，但具有不同的标签。这些标签指定不同的请求状态。&lt;/p&gt;
&lt;p&gt;如果我们只对返回 HTTP code 200 的请求感兴趣，则可以使用此查询来检索该信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;promhttp_metric_handler_requests_total{code=&amp;#34;200&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要统计返回的时间序列数，您可以编写：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;count(promhttp_metric_handler_requests_total)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关表达语言的更多信息，请参见 &lt;a href=&#34;https://prometheus.io/docs/querying/basics/&#34;&gt;expression language documentation&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用绘图界面&#34;&gt;使用绘图界面&lt;/h2&gt;
&lt;p&gt;要绘制表达式的图形，请导航到 http://localhost:9090/graph 并使用 &amp;ldquo;Graph&amp;rdquo; 选项卡。&lt;/p&gt;
&lt;p&gt;例如，输入以下表达式以绘制在自抓取的 Prometheus 中发生的每秒返回状态码 200 的 HTTP 请求速率&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rate(promhttp_metric_handler_requests_total{code=&amp;#34;200&amp;#34;}[1m])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您可以尝试使用图形 range 参数和其他设置。&lt;/p&gt;
&lt;h2 id=&#34;监控其他目标&#34;&gt;监控其他目标&lt;/h2&gt;
&lt;p&gt;仅从 Prometheus 收集指标并不能很好地说明 Prometheus 的功能。为了更好地了解 Prometheus 可以做什么，我们建议您浏览有关其他 exporter 的文档。&lt;a href=&#34;https://prometheus.io/docs/guides/node-exporter&#34;&gt;Monitoring Linux or macOS host metrics using a node exporter&lt;/a&gt; 指南是一个不错的起点。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在本指南中，您安装了 Prometheus，配置了 Prometheus 实例以监视资源，并了解了在 Prometheus 表达式浏览器中使用时间序列数据的一些基础知识。要继续学习 Prometheus，请查看 &lt;a href=&#34;https://prometheus.io/docs/introduction/overview&#34;&gt;Overview&lt;/a&gt; 以获取有关接下来要探索的内容的一些想法。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Comparison to Alternatives</title>
      <link>/docs/monitoring/prometheus/introduction/comparison-to-alternatives/</link>
      <pubDate>Sat, 25 Jul 2020 16:26:46 +0800</pubDate>
      
      <guid>/docs/monitoring/prometheus/introduction/comparison-to-alternatives/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prometheus-vs-graphite&#34;&gt;Prometheus vs. Graphite&lt;/h2&gt;
&lt;h3 id=&#34;scope&#34;&gt;Scope&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://graphite.readthedocs.org/en/latest/&#34;&gt;Graphite&lt;/a&gt; 专注于成为具有查询语言和图形功能的被动时间序列数据库。 其他任何问题都可以通过外部组件解决。&lt;/p&gt;
&lt;p&gt;Prometheus 是一个完整的监视和趋势分析系统，包括基于时间序列数据的内置和主动抓取、存储、查询、图形化和警报。它了解世界应该是什么样子（应该存在哪些端点，什么时间序列模式意味着麻烦等），并积极尝试查找错误。&lt;/p&gt;
&lt;h3 id=&#34;data-model&#34;&gt;Data model&lt;/h3&gt;
&lt;p&gt;Graphite 存储命名时间序列的数值样本，就像 Prometheus 一样。但是，Prometheus 的元数据模型更加丰富：Graphite 指标名称由点分隔的成分组成，这些成分隐式地对维度进行编码，Prometheus 将维度明确编码为键值对（称为标签），并附加到度量标准名称。这允许查询语言通过这些标签轻松进行过滤，分组和匹配。&lt;/p&gt;
&lt;p&gt;此外，尤其是当 Graphite 与 &lt;a href=&#34;https://github.com/etsy/statsd/&#34;&gt;StatsD&lt;/a&gt; 结合使用时，它通常只存储在所有受监视实例上的聚合数据，而不是将实例保留为一个维度并能够向下钻取到有问题的实例。&lt;/p&gt;
&lt;p&gt;例如，在  Graphite/StatsD 中存储对 API server 发起的 &lt;code&gt;POST&lt;/code&gt; 方法到 &lt;code&gt;/tracks&lt;/code&gt; 端点且响应码是 500  的 HTTP 请求数通常会这样编码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stats.api-server.tracks.post.500 -&amp;gt; 93
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Prometheus 中，相同的数据将会像这样编码（假设三个 api-server 实例）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;api_server_http_requests_total{method=&amp;#34;POST&amp;#34;,handler=&amp;#34;/tracks&amp;#34;,status=&amp;#34;500&amp;#34;,instance=&amp;#34;&amp;lt;sample1&amp;gt;&amp;#34;} -&amp;gt; 34
api_server_http_requests_total{method=&amp;#34;POST&amp;#34;,handler=&amp;#34;/tracks&amp;#34;,status=&amp;#34;500&amp;#34;,instance=&amp;#34;&amp;lt;sample2&amp;gt;&amp;#34;} -&amp;gt; 28
api_server_http_requests_total{method=&amp;#34;POST&amp;#34;,handler=&amp;#34;/tracks&amp;#34;,status=&amp;#34;500&amp;#34;,instance=&amp;#34;&amp;lt;sample3&amp;gt;&amp;#34;} -&amp;gt; 31
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;storage&#34;&gt;Storage&lt;/h3&gt;
&lt;p&gt;Graphite 将时间序列数据以 &lt;a href=&#34;https://graphite.readthedocs.org/en/latest/whisper.html&#34;&gt;Whisper&lt;/a&gt; 格式存储在本地磁盘上，&lt;/p&gt;
&lt;p&gt;Graphite 以 &lt;a href=&#34;https://graphite.readthedocs.org/en/latest/whisper.html&#34;&gt;Whisper&lt;/a&gt; 格式将时间序列数据存储在本地磁盘上，这是一种 RRD 风格的数据库，它希望样本以固定的时间间隔到达。每个时间序列都存储在一个单独的文件中，新样本在一定时间后会覆盖旧样本。&lt;/p&gt;
&lt;p&gt;Prometheus 同样为每个时间序列创建一个本地文件，但允许在出现抓取或规则评估时以任意间隔存储样本。由于新样本只是简单地附加，因此旧数据可以任意保留。Prometheus 也适用于许多短暂的，经常变化的时间序列集。&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Prometheus 除了更易于运行和集成到您的环境之外，还提供了更丰富的数据模型和查询语言。如果您想要一个可以长期保存历史数据的群集解决方案，那么 Graphite 可能是一个更好的选择。&lt;/p&gt;
&lt;h2 id=&#34;prometheus-vs-influxdb&#34;&gt;Prometheus vs. InfluxDB&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://influxdata.com/&#34;&gt;InfluxDB&lt;/a&gt; 是一个开源时间序列数据库，具有用于扩展和集群化的商业选项。Prometheus 开发开始将近一年后，InfluxDB 项目才发布，因此我们当时无法将其视为替代方案。尽管如此，Prometheus 和 InfluxDB 之间仍然存在重大差异，并且两种系统都针对稍有不同的用例。&lt;/p&gt;
&lt;h3 id=&#34;scope-1&#34;&gt;Scope&lt;/h3&gt;
&lt;p&gt;为了进行公平的比较，我们还必须将 &lt;a href=&#34;https://github.com/influxdata/kapacitor&#34;&gt;Kapacitor&lt;/a&gt; 与 InfluxDB 一起考虑，因为它们结合起来可以解决与 Prometheus 和 Alertmanager 相同的问题空间。&lt;/p&gt;
&lt;p&gt;与 &lt;a href=&#34;https://prometheus.io/docs/introduction/comparison/#prometheus-vs-graphite&#34;&gt;Graphite&lt;/a&gt; 相同的范围差异在这里适用于 InfluxDB 本身。另外，InfluxDB 提供了连续查询，这些查询等同于 Prometheus 记录规则。&lt;/p&gt;
&lt;p&gt;Kapacitor 的范围是 Prometheus 记录规则，警报规则和 Alertmanager 的通知功能的组合。Prometheus 提供了&lt;a href=&#34;https://www.robustperception.io/translating-between-monitoring-languages/&#34;&gt;更强大的查询语言来进行图形显示和警报&lt;/a&gt;。 Prometheus Alertmanager 还提供分组，重复数据删除和静音功能。&lt;/p&gt;
&lt;h3 id=&#34;data-model--storage&#34;&gt;Data model / storage&lt;/h3&gt;
&lt;p&gt;与 Prometheus 一样，InfluxDB 数据模型也使用键值对作为标签，称为 tags。此外，InfluxDB 还有第二级标签，称为字段，使用范围受到更多限制。InfluxDB 支持最高达纳秒级的时间戳，以及 float64，int64，bool 和字符串数据类型。相比之下，Prometheus 支持 float64 数据类型，有限的字符串支持和毫秒级的时间戳。&lt;/p&gt;
&lt;p&gt;InfluxDB 使用 &lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.7/concepts/storage_engine/&#34;&gt;log-structured merge tree for storage with a write ahead log&lt;/a&gt; 的变体，使用时间分片。与 Prometheus 的为每个时间序列仅附加到文件的方法相比，此方法更适合事件记录。&lt;/p&gt;
&lt;p&gt;InfluxDB uses a variant of a &lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.7/concepts/storage_engine/&#34;&gt;log-structured merge tree for storage with a write ahead log&lt;/a&gt;, sharded by time. This is much more suitable to event logging than Prometheus&amp;rsquo;s append-only file per time series approach.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.raintank.io/logs-and-metrics-and-graphs-oh-my/&#34;&gt;Logs and Metrics and Graphs, Oh My!&lt;/a&gt; 描述了事件记录和指标记录之间的区别。&lt;/p&gt;
&lt;h3 id=&#34;architecture&#34;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;Prometheus servers 彼此独立运行，并且仅依靠其本地存储来实现其核心功能：抓取，规则处理和警报。 InfluxDB 的开源版本与此类似。&lt;/p&gt;
&lt;p&gt;根据设计，商业 InfluxDB 产品是一个分布式存储集群，其中存储和查询由多个节点一次处理。&lt;/p&gt;
&lt;p&gt;这意味着商业 InfluxDB 将更易于水平扩展，但这也意味着您必须从一开始就管理分布式存储系统的复杂性。Prometheus 将更容易运行，但是在某些时候，您将需要按照产品，服务，数据中心或类似方面的可伸缩性边界明确地划分服务器。独立的服务（可以并行冗余运行）也可以为您提供更好的可靠性和故障隔离。&lt;/p&gt;
&lt;p&gt;Kapacitor 的开源版本没有内置分布式/冗余选项用于规则，警报或通知。Kapacitor 的开源发行版可以通过用户手动分片来扩展，类似于 Prometheus 本身。 Influx 提供了 &lt;a href=&#34;https://docs.influxdata.com/enterprise_kapacitor&#34;&gt;Enterprise Kapacitor&lt;/a&gt;，它支持了 HA/冗余 警报系统。&lt;/p&gt;
&lt;p&gt;相比之下，Prometheus 和 Alertmanager 通过运行 Prometheus 的冗余副本并使用 Alertmanager 的 &lt;a href=&#34;https://github.com/prometheus/alertmanager#high-availability&#34;&gt;High Availability&lt;/a&gt; 模式提供了完全开源的冗余选项。&lt;/p&gt;
&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;系统之间有许多相似之处。两者都有标签（在 InfluxDB 中称为tags）以有效支持多维指标。两者都使用基本相同的数据压缩算法。两者都有广泛的集成，包括彼此之间的集成。两者都有钩子，可让您进一步扩展它们，例如使用统计工具分析数据或执行自动化操作。&lt;/p&gt;
&lt;p&gt;InfluxDB 更好的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果您要进行事件记录。&lt;/li&gt;
&lt;li&gt;商业选项为 InfluxDB 提供集群，这对于长期数据存储也更好。&lt;/li&gt;
&lt;li&gt;最终在副本之间保持一致的数据视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prometheus 更好的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果您主要是在做指标。&lt;/li&gt;
&lt;li&gt;更强大的查询语言，警报和通知功能。&lt;/li&gt;
&lt;li&gt;图形和警报的可用性和正常运行时间更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where Prometheus is better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re primarily doing metrics.&lt;/li&gt;
&lt;li&gt;More powerful query language, alerting, and notification functionality.&lt;/li&gt;
&lt;li&gt;Higher availability and uptime for graphing and alerting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;InfluxDB 由一家商业公司按照开放核心模型进行维护，并提供高级功能，例如封源的群集，托管和支持。Prometheus 是一个&lt;a href=&#34;https://prometheus.io/community/&#34;&gt;完全开源的独立项目&lt;/a&gt;，由许多公司和个人维护，其中一些还提供商业服务和支持。&lt;/p&gt;
&lt;h2 id=&#34;prometheus-vs-opentsdb&#34;&gt;Prometheus vs. OpenTSDB&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://opentsdb.net/&#34;&gt;OpenTSDB&lt;/a&gt; is a distributed time series database based on &lt;a href=&#34;https://hadoop.apache.org/&#34;&gt;Hadoop&lt;/a&gt; and &lt;a href=&#34;https://hbase.apache.org/&#34;&gt;HBase&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;scope-2&#34;&gt;Scope&lt;/h3&gt;
&lt;p&gt;The same scope differences as in the case of &lt;a href=&#34;https://prometheus.io/docs/introduction/comparison/#prometheus-vs-graphite&#34;&gt;Graphite&lt;/a&gt; apply here.&lt;/p&gt;
&lt;h3 id=&#34;data-model-1&#34;&gt;Data model&lt;/h3&gt;
&lt;p&gt;OpenTSDB&amp;rsquo;s data model is almost identical to Prometheus&amp;rsquo;s: time series are identified by a set of arbitrary key-value pairs (OpenTSDB tags are Prometheus labels). All data for a metric is &lt;a href=&#34;http://opentsdb.net/docs/build/html/user_guide/writing/index.html#time-series-cardinality&#34;&gt;stored together&lt;/a&gt;, limiting the cardinality of metrics. There are minor differences though: Prometheus allows arbitrary characters in label values, while OpenTSDB is more restrictive. OpenTSDB also lacks a full query language, only allowing simple aggregation and math via its API.&lt;/p&gt;
&lt;h3 id=&#34;storage-1&#34;&gt;Storage&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://opentsdb.net/&#34;&gt;OpenTSDB&lt;/a&gt;&amp;rsquo;s storage is implemented on top of &lt;a href=&#34;https://hadoop.apache.org/&#34;&gt;Hadoop&lt;/a&gt; and &lt;a href=&#34;https://hbase.apache.org/&#34;&gt;HBase&lt;/a&gt;. This means that it is easy to scale OpenTSDB horizontally, but you have to accept the overall complexity of running a Hadoop/HBase cluster from the beginning.&lt;/p&gt;
&lt;p&gt;Prometheus will be simpler to run initially, but will require explicit sharding once the capacity of a single node is exceeded.&lt;/p&gt;
&lt;h3 id=&#34;summary-2&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Prometheus offers a much richer query language, can handle higher cardinality metrics, and forms part of a complete monitoring system. If you&amp;rsquo;re already running Hadoop and value long term storage over these benefits, OpenTSDB is a good choice.&lt;/p&gt;
&lt;h2 id=&#34;prometheus-vs-nagios&#34;&gt;Prometheus vs. Nagios&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nagios.org/&#34;&gt;Nagios&lt;/a&gt; is a monitoring system that originated in the 1990s as NetSaint.&lt;/p&gt;
&lt;h3 id=&#34;scope-3&#34;&gt;Scope&lt;/h3&gt;
&lt;p&gt;Nagios is primarily about alerting based on the exit codes of scripts. These are called “checks”. There is silencing of individual alerts, however no grouping, routing or deduplication.&lt;/p&gt;
&lt;p&gt;There are a variety of plugins. For example, piping the few kilobytes of perfData plugins are allowed to return &lt;a href=&#34;https://github.com/shawn-sterling/graphios&#34;&gt;to a time series database such as Graphite&lt;/a&gt; or using NRPE to &lt;a href=&#34;https://exchange.nagios.org/directory/Addons/Monitoring-Agents/NRPE--2D-Nagios-Remote-Plugin-Executor/details&#34;&gt;run checks on remote machines&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;data-model-2&#34;&gt;Data model&lt;/h3&gt;
&lt;p&gt;Nagios is host-based. Each host can have one or more services and each service can perform one check.&lt;/p&gt;
&lt;p&gt;There is no notion of labels or a query language.&lt;/p&gt;
&lt;h3 id=&#34;storage-2&#34;&gt;Storage&lt;/h3&gt;
&lt;p&gt;Nagios has no storage per-se, beyond the current check state. There are plugins which can store data such as &lt;a href=&#34;https://docs.pnp4nagios.org/&#34;&gt;for visualisation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;architecture-1&#34;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;Nagios servers are standalone. All configuration of checks is via file.&lt;/p&gt;
&lt;h3 id=&#34;summary-3&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Nagios is suitable for basic monitoring of small and/or static systems where blackbox probing is sufficient.&lt;/p&gt;
&lt;p&gt;If you want to do whitebox monitoring, or have a dynamic or cloud based environment, then Prometheus is a good choice.&lt;/p&gt;
&lt;h2 id=&#34;prometheus-vs-sensu&#34;&gt;Prometheus vs. Sensu&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sensu.io/&#34;&gt;Sensu&lt;/a&gt; is a composable monitoring pipeline that can reuse existing Nagios checks.&lt;/p&gt;
&lt;h3 id=&#34;scope-4&#34;&gt;Scope&lt;/h3&gt;
&lt;p&gt;The same general scope differences as in the case of Nagios apply here.&lt;/p&gt;
&lt;p&gt;There is also a &lt;a href=&#34;https://docs.sensu.io/sensu-core/latest/reference/clients/#what-is-the-sensu-client-socket&#34;&gt;client socket&lt;/a&gt; permitting ad-hoc check results to be pushed into Sensu.&lt;/p&gt;
&lt;h3 id=&#34;data-model-3&#34;&gt;Data model&lt;/h3&gt;
&lt;p&gt;Sensu has the same rough data model as &lt;a href=&#34;https://prometheus.io/docs/introduction/comparison/#prometheus-vs-nagios&#34;&gt;Nagios&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;storage-3&#34;&gt;Storage&lt;/h3&gt;
&lt;p&gt;Sensu uses Redis to persist monitoring data, including the Sensu client registry, check results, check execution history, and current event data.&lt;/p&gt;
&lt;h3 id=&#34;architecture-2&#34;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;Sensu has a &lt;a href=&#34;https://docs.sensu.io/sensu-core/latest/overview/architecture/&#34;&gt;number of components&lt;/a&gt;. It uses RabbitMQ as a transport, Redis for current state, and a separate server for processing and API access.&lt;/p&gt;
&lt;p&gt;All components of a Sensu deployment (RabbitMQ, Redis, and Sensu Server/API) can be clustered for highly available and redundant configurations.&lt;/p&gt;
&lt;h3 id=&#34;summary-4&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;If you have an existing Nagios setup that you wish to scale as-is, or want to take advantage of the automatic registration feature of Sensu, then Sensu is a good choice.&lt;/p&gt;
&lt;p&gt;If you want to do whitebox monitoring, or have a very dynamic or cloud based environment, then Prometheus is a good choice.&lt;/p&gt;
&lt;p&gt;comparison to alternatives&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Frequently Asked Questions</title>
      <link>/docs/monitoring/prometheus/introduction/faq/</link>
      <pubDate>Sat, 25 Jul 2020 18:12:30 +0800</pubDate>
      
      <guid>/docs/monitoring/prometheus/introduction/faq/</guid>
      <description>
        
        
        &lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;
&lt;h3 id=&#34;什么是-prometheus&#34;&gt;什么是 Prometheus？&lt;/h3&gt;
&lt;p&gt;Prometheus 是具有活跃生态系统的开源系统监视和警报工具包。请参阅 &lt;a href=&#34;https://prometheus.io/docs/introduction/overview/&#34;&gt;overview&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-与其他监控系统相比如何&#34;&gt;Prometheus 与其他监控系统相比如何？&lt;/h3&gt;
&lt;p&gt;请参阅 &lt;a href=&#34;https://prometheus.io/docs/introduction/comparison/&#34;&gt;comparison&lt;/a&gt; 页面。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-有什么依赖性&#34;&gt;Prometheus 有什么依赖性？&lt;/h3&gt;
&lt;p&gt;主要的 Prometheus server 独立运行，没有外部依赖性。&lt;/p&gt;
&lt;h3 id=&#34;可以使-prometheus-高度可用吗&#34;&gt;可以使 Prometheus 高度可用吗？&lt;/h3&gt;
&lt;p&gt;是的，在两台或更多台单独的计算机上运行相同的 Prometheus server。相同的警报将由 &lt;a href=&#34;https://github.com/prometheus/alertmanager&#34;&gt;Alertmanager&lt;/a&gt; 进行重复数据删除。&lt;/p&gt;
&lt;p&gt;为了 &lt;a href=&#34;https://github.com/prometheus/alertmanager#high-availability&#34;&gt;Alertmanager的高可用&lt;/a&gt;，您可以在 &lt;a href=&#34;https://github.com/weaveworks/mesh&#34;&gt;Mesh cluster&lt;/a&gt; 中运行多个实例，并将 Prometheus server 配置为向每个实例发送通知。&lt;/p&gt;
&lt;h3 id=&#34;有人告诉我-prometheus-不能缩放&#34;&gt;有人告诉我 Prometheus “不能缩放”。&lt;/h3&gt;
&lt;p&gt;实际上，存在多种缩放和联合 Prometheus 的方法。阅读 Robust Perception 博客上的 &lt;a href=&#34;https://www.robustperception.io/scaling-and-federating-prometheus/&#34;&gt;Scaling and Federating Prometheus&lt;/a&gt;，以开始使用。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-用什么语言编写&#34;&gt;Prometheus 用什么语言编写？&lt;/h3&gt;
&lt;p&gt;大多数 Prometheus 组件都是用Go编写的。有些还用 Java、Python 和 Ruby 编写。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-功能存储格式和-api-的稳定性如何&#34;&gt;Prometheus 功能、存储格式和 API 的稳定性如何？&lt;/h3&gt;
&lt;p&gt;All repositories in the Prometheus GitHub organization that have reached version 1.0.0 broadly follow &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;. Breaking changes are indicated by increments of the major version. Exceptions are possible for experimental components, which are clearly marked as such in announcements.&lt;/p&gt;
&lt;p&gt;Even repositories that have not yet reached version 1.0.0 are, in general, quite stable. We aim for a proper release process and an eventual 1.0.0 release for each repository. In any case, breaking changes will be pointed out in release notes (marked by &lt;code&gt;[CHANGE]&lt;/code&gt;) or communicated clearly for components that do not have formal releases yet.&lt;/p&gt;
&lt;h3 id=&#34;为什么要拉取而不是推送&#34;&gt;为什么要拉取而不是推送？&lt;/h3&gt;
&lt;p&gt;通过 HTTP 拉取有许多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发更改时，可以在笔记本电脑上运行监控。&lt;/li&gt;
&lt;li&gt;您可以更轻松地判断目标是否已关闭。&lt;/li&gt;
&lt;li&gt;您可以手动转到目标并使用Web浏览器检查其运行状况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体而言，我们认为拉取要比推送略好，但在考虑使用监控系统时，不应将其视为重点。&lt;/p&gt;
&lt;p&gt;对于必须推送的情况，我们提供了 &lt;a href=&#34;https://prometheus.io/docs/instrumenting/pushing/&#34;&gt;Pushgateway&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;如何将日志输入-prometheus&#34;&gt;如何将日志输入 Prometheus？&lt;/h3&gt;
&lt;p&gt;Short answer: Don&amp;rsquo;t! Use something like the &lt;a href=&#34;https://www.elastic.co/products&#34;&gt;ELK stack&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;Longer answer: Prometheus is a system to collect and process metrics, not an event logging system. The Raintank blog post &lt;a href=&#34;https://blog.raintank.io/logs-and-metrics-and-graphs-oh-my/&#34;&gt;Logs and Metrics and Graphs, Oh My!&lt;/a&gt; provides more details about the differences between logs and metrics.&lt;/p&gt;
&lt;p&gt;If you want to extract Prometheus metrics from application logs, Google&amp;rsquo;s &lt;a href=&#34;https://github.com/google/mtail&#34;&gt;mtail&lt;/a&gt; might be helpful.&lt;/p&gt;
&lt;h3 id=&#34;谁写了-prometheus&#34;&gt;谁写了 Prometheus？&lt;/h3&gt;
&lt;p&gt;Prometheus was initially started privately by &lt;a href=&#34;http://www.matttproud.com/&#34;&gt;Matt T. Proud&lt;/a&gt; and &lt;a href=&#34;http://juliusv.com/&#34;&gt;Julius Volz&lt;/a&gt;. The majority of its initial development was sponsored by &lt;a href=&#34;https://soundcloud.com/&#34;&gt;SoundCloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s now maintained and extended by a wide range of companies and individuals.&lt;/p&gt;
&lt;h3 id=&#34;prometheus-使用什么许可证&#34;&gt;Prometheus 使用什么许可证？&lt;/h3&gt;
&lt;p&gt;Prometheus is released under the &lt;a href=&#34;https://github.com/prometheus/prometheus/blob/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt; license.&lt;/p&gt;
&lt;h3 id=&#34;prometheus-的复数是什么&#34;&gt;Prometheus 的复数是什么？&lt;/h3&gt;
&lt;p&gt;After &lt;a href=&#34;https://youtu.be/B_CDeYrqxjQ&#34;&gt;extensive research&lt;/a&gt;, it has been determined that the correct plural of &amp;lsquo;Prometheus&amp;rsquo; is &amp;lsquo;Prometheis&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;我可以重新载入-prometheus-的配置吗&#34;&gt;我可以重新载入 Prometheus 的配置吗？&lt;/h3&gt;
&lt;p&gt;Yes, sending &lt;code&gt;SIGHUP&lt;/code&gt; to the Prometheus process or an HTTP POST request to the &lt;code&gt;/-/reload&lt;/code&gt; endpoint will reload and apply the configuration file. The various components attempt to handle failing changes gracefully.&lt;/p&gt;
&lt;h3 id=&#34;我可以发送警报吗&#34;&gt;我可以发送警报吗？&lt;/h3&gt;
&lt;p&gt;Yes, with the &lt;a href=&#34;https://github.com/prometheus/alertmanager&#34;&gt;Alertmanager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Currently, the following external systems are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Generic Webhooks&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hipchat.com/&#34;&gt;HipChat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opsgenie.com/&#34;&gt;OpsGenie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pagerduty.com/&#34;&gt;PagerDuty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pushover.net/&#34;&gt;Pushover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;can-i-create-dashboards&#34;&gt;Can I create dashboards?&lt;/h3&gt;
&lt;p&gt;Yes, we recommend &lt;a href=&#34;https://prometheus.io/docs/visualization/grafana/&#34;&gt;Grafana&lt;/a&gt; for production usage. There are also &lt;a href=&#34;https://prometheus.io/docs/visualization/consoles/&#34;&gt;Console templates&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;can-i-change-the-timezone-why-is-everything-in-utc&#34;&gt;Can I change the timezone? Why is everything in UTC?&lt;/h3&gt;
&lt;p&gt;To avoid any kind of timezone confusion, especially when the so-called daylight saving time is involved, we decided to exclusively use Unix time internally and UTC for display purposes in all components of Prometheus. A carefully done timezone selection could be introduced into the UI. Contributions are welcome. See &lt;a href=&#34;https://github.com/prometheus/prometheus/issues/500&#34;&gt;issue #500&lt;/a&gt; for the current state of this effort.&lt;/p&gt;
&lt;h2 id=&#34;instrumentation&#34;&gt;Instrumentation&lt;/h2&gt;
&lt;h3 id=&#34;which-languages-have-instrumentation-libraries&#34;&gt;Which languages have instrumentation libraries?&lt;/h3&gt;
&lt;p&gt;There are a number of client libraries for instrumenting your services with Prometheus metrics. See the &lt;a href=&#34;https://prometheus.io/docs/instrumenting/clientlibs/&#34;&gt;client libraries&lt;/a&gt; documentation for details.&lt;/p&gt;
&lt;p&gt;If you are interested in contributing a client library for a new language, see the &lt;a href=&#34;https://prometheus.io/docs/instrumenting/exposition_formats/&#34;&gt;exposition formats&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;can-i-monitor-machines&#34;&gt;Can I monitor machines?&lt;/h3&gt;
&lt;p&gt;Yes, the &lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;Node Exporter&lt;/a&gt; exposes an extensive set of machine-level metrics on Linux and other Unix systems such as CPU usage, memory, disk utilization, filesystem fullness, and network bandwidth.&lt;/p&gt;
&lt;h3 id=&#34;can-i-monitor-network-devices&#34;&gt;Can I monitor network devices?&lt;/h3&gt;
&lt;p&gt;Yes, the &lt;a href=&#34;https://github.com/prometheus/snmp_exporter&#34;&gt;SNMP Exporter&lt;/a&gt; allows monitoring of devices that support SNMP.&lt;/p&gt;
&lt;h3 id=&#34;can-i-monitor-batch-jobs&#34;&gt;Can I monitor batch jobs?&lt;/h3&gt;
&lt;p&gt;Yes, using the &lt;a href=&#34;https://prometheus.io/docs/instrumenting/pushing/&#34;&gt;Pushgateway&lt;/a&gt;. See also the &lt;a href=&#34;https://prometheus.io/docs/practices/instrumentation/#batch-jobs&#34;&gt;best practices&lt;/a&gt; for monitoring batch jobs.&lt;/p&gt;
&lt;h3 id=&#34;what-applications-can-prometheus-monitor-out-of-the-box&#34;&gt;What applications can Prometheus monitor out of the box?&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/&#34;&gt;the list of exporters and integrations&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;can-i-monitor-jvm-applications-via-jmx&#34;&gt;Can I monitor JVM applications via JMX?&lt;/h3&gt;
&lt;p&gt;Yes, for applications that you cannot instrument directly with the Java client, you can use the &lt;a href=&#34;https://github.com/prometheus/jmx_exporter&#34;&gt;JMX Exporter&lt;/a&gt; either standalone or as a Java Agent.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-performance-impact-of-instrumentation&#34;&gt;What is the performance impact of instrumentation?&lt;/h3&gt;
&lt;p&gt;Performance across client libraries and languages may vary. For Java, &lt;a href=&#34;https://github.com/prometheus/client_java/blob/master/benchmark/README.md&#34;&gt;benchmarks&lt;/a&gt; indicate that incrementing a counter/gauge with the Java client will take 12-17ns, depending on contention. This is negligible for all but the most latency-critical code.&lt;/p&gt;
&lt;h2 id=&#34;故障排除&#34;&gt;故障排除&lt;/h2&gt;
&lt;h3 id=&#34;我的-prometheus-1x-server-需要很长时间才能启动并且会向日志中发送有关崩溃恢复的大量信息的垃圾邮件&#34;&gt;我的 Prometheus 1.x server 需要很长时间才能启动，并且会向日志中发送有关崩溃恢复的大量信息的垃圾邮件。&lt;/h3&gt;
&lt;p&gt;You are suffering from an unclean shutdown. Prometheus has to shut down cleanly after a &lt;code&gt;SIGTERM&lt;/code&gt;, which might take a while for heavily used servers. If the server crashes or is killed hard (e.g. OOM kill by the kernel or your runlevel system got impatient while waiting for Prometheus to shutdown), a crash recovery has to be performed, which should take less than a minute under normal circumstances, but can take quite long under certain circumstances. See &lt;a href=&#34;https://prometheus.io/docs/prometheus/1.8/storage/#crash-recovery&#34;&gt;crash recovery&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&#34;my-prometheus-1x-server-runs-out-of-memory&#34;&gt;My Prometheus 1.x server runs out of memory.&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://prometheus.io/docs/prometheus/1.8/storage/#memory-usage&#34;&gt;the section about memory usage&lt;/a&gt; to configure Prometheus for the amount of memory you have available.&lt;/p&gt;
&lt;h3 id=&#34;my-prometheus-1x-server-reports-to-be-in-rushed-mode-or-that-storage-needs-throttling&#34;&gt;My Prometheus 1.x server reports to be in “rushed mode” or that “storage needs throttling”.&lt;/h3&gt;
&lt;p&gt;Your storage is under heavy load. Read &lt;a href=&#34;https://prometheus.io/docs/prometheus/1.8/storage/&#34;&gt;the section about configuring the local storage&lt;/a&gt; to find out how you can tweak settings for better performance.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;h3 id=&#34;why-are-all-sample-values-64-bit-floats-i-want-integers&#34;&gt;Why are all sample values 64-bit floats? I want integers.&lt;/h3&gt;
&lt;p&gt;We restrained ourselves to 64-bit floats to simplify the design. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Double-precision_floating-point_format&#34;&gt;IEEE 754 double-precision binary floating-point format&lt;/a&gt; supports integer precision for values up to 253. Supporting native 64 bit integers would (only) help if you need integer precision above 253 but below 263. In principle, support for different sample value types (including some kind of big integer, supporting even more than 64 bit) could be implemented, but it is not a priority right now. A counter, even if incremented one million times per second, will only run into precision issues after over 285 years.&lt;/p&gt;
&lt;h3 id=&#34;why-dont-the-prometheus-server-components-support-tls-or-authentication-can-i-add-those&#34;&gt;Why don&amp;rsquo;t the Prometheus server components support TLS or authentication? Can I add those?&lt;/h3&gt;
&lt;p&gt;Note: The Prometheus team has changed their stance on this during its development summit on August 11, 2018, and support for TLS and authentication in serving endpoints is now on the &lt;a href=&#34;https://prometheus.io/docs/introduction/roadmap/#tls-and-authentication-in-http-serving-endpoints&#34;&gt;project&amp;rsquo;s roadmap&lt;/a&gt;. This document will be updated once code changes have been made.&lt;/p&gt;
&lt;p&gt;While TLS and authentication are frequently requested features, we have intentionally not implemented them in any of Prometheus&amp;rsquo;s server-side components. There are so many different options and parameters for both (10+ options for TLS alone) that we have decided to focus on building the best monitoring system possible rather than supporting fully generic TLS and authentication solutions in every server component.&lt;/p&gt;
&lt;p&gt;If you need TLS or authentication, we recommend putting a reverse proxy in front of Prometheus. See, for example &lt;a href=&#34;https://www.robustperception.io/adding-basic-auth-to-prometheus-with-nginx/&#34;&gt;Adding Basic Auth to Prometheus with Nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This applies only to inbound connections. Prometheus does support &lt;a href=&#34;https://prometheus.io/docs/operating/configuration/#&#34;&gt;scraping TLS- and auth-enabled targets&lt;/a&gt;, and other Prometheus components that create outbound connections have similar support.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pod Overview</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-overview/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-overview/</guid>
      <description>
        
        
        &lt;p&gt;Pod 是 Kubernetes 对象模型中最小的可部署对象。&lt;/p&gt;
&lt;h2 id=&#34;理解-pods&#34;&gt;理解 Pods&lt;/h2&gt;
&lt;p&gt;Pod 是 Kubernetes 应用程序的基本执行单元 - 在您创建或部署的 Kubernetes 对象模型中最小和最简单的单元。Pod 表示集群中运行的进程。&lt;/p&gt;
&lt;p&gt;Pod 封装了一个应用程序的容器（或在某些情况下为多个容器），存储资源，唯一的网络标识（IP 地址）以及管理容器容器如何运行的选项。Pod 表示部署的单元：Kubernetes 中应用程序的单个实例，可能由单个容器或紧密耦合并共享资源的少量容器组成。&lt;/p&gt;
&lt;p&gt;Kubernetes 集群中的 Pod 可以通过两种主要方式使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行单个容器的 Pod：”one-container-per-Pod“ 模型是最常见的 Kubernetes 用例。在这种情况下，您可以将 Pod 视为单个容器的包装，而 Kubernetes 则直接管理 Pod，而不是直接管理容器。&lt;/li&gt;
&lt;li&gt;运行多个需要协同工作的容器的 Pod：Pod 可能封装了一个应用程序，该应用程序由紧密耦合且需要共享资源的多个并置容器组成。这些并置的容器可能形成一个内聚的服务单元 - 一个容器将文件从共享卷提供给公众，而一个单独的”sidecar“容器则刷新或更新这些文件。Pod 将这些容器和存储资源包装在一起，成为一个可管理的实体。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 Pod 旨在运行给定应用程序的单个实例。如果要水平扩展应用程序（通过运行更多实例来提供更多整体资源），则应使用多个 Pod，每个实例一个。在 Kubernetes 中，这通常称为复制 replication。复制的 Pods 通常作为一个组被 workload 资源及其 &lt;code&gt;_controller_&lt;/code&gt;  创建和管理。&lt;/p&gt;
&lt;h3 id=&#34;pods-如何管理多个容器&#34;&gt;Pods 如何管理多个容器&lt;/h3&gt;
&lt;p&gt;Pod 被设计为支持多个协作进程（即容器）组成一个内聚的服务单元。Pod 中的容器会自动地共同放置和调度到集群中的同一物理或虚拟机上。这些容器可以共享资源和依赖项，彼此通信，并协调何时以及如何终止他们。&lt;/p&gt;
&lt;p&gt;请注意，在单个 Pod 中对多个共同放置和管理的容器进行分组是一个相对高级的用例。您仅应在容器紧密耦合的特定实例中使用此模式。例如，您可能有一个容器充当共享卷中文件的 Web 服务器，以及一个单独的”sidecar“容器从远程源更新这些文件，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/aecab1f649bc640ebef1f05581bfcc91a48038c4/728d6/images/docs/pod.svg&#34; alt=&#34;pod&#34;&gt;&lt;/p&gt;
&lt;p&gt;有些 Pod 具有 init 容器和 app 容器。init 容器在 app 容器启动前运行并完成。&lt;/p&gt;
&lt;p&gt;Pod 为其组成的容器提供两种共享资源：networking 和 storage。&lt;/p&gt;
&lt;h4 id=&#34;networking&#34;&gt;Networking&lt;/h4&gt;
&lt;p&gt;每个 Pod 为每个地址族分配一个唯一的 IP 地址。Pod 中的每个容器都共享这个网络名称空间，包括 IP 地址和网络端口。在同一个 Pod 中的容器可以使用 &lt;code&gt;localhost&lt;/code&gt; 相互通信。当 Pod 中的容器与 Pod 外部的实体进行通信时，它们必须协调如何使用共享的网络资源（例如端口）。&lt;/p&gt;
&lt;h4 id=&#34;storage&#34;&gt;Storage&lt;/h4&gt;
&lt;p&gt;一个 Pod 可以指定一组共享存储卷。这个 Pod 中的所有容器都可以访问共享卷，从而使这些容器可以共享数据。Volumes 还允许 Pod 中的持久化数据保存下来，以防其中的容器之一需要重新启动。&lt;/p&gt;
&lt;h2 id=&#34;working-with-pods&#34;&gt;Working with Pods&lt;/h2&gt;
&lt;p&gt;您很少会直接在 Kubernetes 中创建单个 Pod &amp;ndash; 甚至是单身 Pod。这是因为 Pod 被设计为相对短暂的一次性的实体。当一个 Pod 被创建时（直接由您创建，或者由 &lt;em&gt;controller&lt;/em&gt; 间接创建），它将被安排在集群中的 Node 上运行。Pod 会保留在该节点上，直到进程终止，Pod 对象被删除，Pod 由于缺少资源而被驱逐，或节点发生故障为止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：不要将重新启动 Pod 中的容器与重新启动 Pod 混淆。Pod 不是进程，而是用于运行容器的环境。Pod 会一直存在直到被删除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pod 本身无法自我修复。如果 Pod 被调度到发生故障的节点，或者调度操作本身失败，Pod 将被删除。同样，由于缺乏资源或 Node 维护，Pod 无法幸免。Kubernetes 使用称为控制器的更高级的抽象来处理管理相对一次性的 Pod 实例的工作。因此，虽然可以直接使用 Pod，但在 Kubernetes 中使用控制器来管理 Pod 更为常见。&lt;/p&gt;
&lt;h3 id=&#34;pods-and-controllers&#34;&gt;Pods and controllers&lt;/h3&gt;
&lt;p&gt;您可以使用工作负载资源为您创建和管理多个 Pod。资源的控制器处理 Pod 失败时的复制和回滚以及自动修复。例如，如果某个节点发生故障，则控制器会注意到该节点上的 Pod 已停止工作，并创建了一个替换 Pod。调度程序将替换的 Pod 放置到健康的节点上。&lt;/p&gt;
&lt;p&gt;以下是管理一个或多个 Pod 的工作负载资源的一些示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;StatefulSet&lt;/li&gt;
&lt;li&gt;DaemonSet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod-templates&#34;&gt;Pod templates&lt;/h2&gt;
&lt;p&gt;工作负载资源的控制器从 Pod 模板创建 Pod，并代表您管理这些 Pod。 PodTemplates 是用于创建 Pod 的规范，并且包含在工作负载资源（如 Deployments，Jobs 和 DaemonSets）中。&lt;/p&gt;
&lt;p&gt;工作负载资源的每个控制器都使用工作负载对象内部的 PodTemplate 来创建实际的 Pod。PodTemplate 是用于运行应用程序的任何工作负载资源的期望状态的一部分。&lt;/p&gt;
&lt;p&gt;下面的示例是一个简单的 Job 的清单，带有一个启动一个容器的 &lt;code&gt;template&lt;/code&gt;。该 Pod 中的容器会打印一条消息，然后暂停。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;batch/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Job&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;hello&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# This is the pod template&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;hello&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;busybox&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;echo &amp;#34;Hello, Kubernetes!&amp;#34; &amp;amp;&amp;amp; sleep 3600&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;restartPolicy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;OnFailure&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# The pod template ends here&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 pod 模板或切换到新的 pod 模板对已存在的 Pod 无效。 Pod 不会直接接收模板更新。而是创建一个新的 Pod 以匹配修订后的 Pod 模板。&lt;/p&gt;
&lt;p&gt;例如，Deployment 控制器可确保正在运行的 Pod 与当前 Pod 模板匹配。如果模板已更新，则控制器必须删除现有的 Pod 并根据更新的模板创建新的 Pod。每个工作负载控制器都实现自己的规则，以处理 Pod 模板的更改。&lt;/p&gt;
&lt;p&gt;在节点上，kubelet 不会直接观察或管理有关 pod 模板和更新的任何详细信息。这些细节被抽象掉了。关注点的抽象和分离简化了系统语义，并使得在不更改现有代码的情况下扩展集群的行为变得可行。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pods</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/pods/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/pods/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;Pod&lt;/em&gt; 是可以在 Kubernetes 中创建和管理的最小的可部署计算单元。&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-pod&#34;&gt;What is a Pod?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Pod&lt;/em&gt;（就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个）容器（例如 Docker 容器），这些容器具有共享的存储/网络，以及有关如何运行容器的规范。Pod 的内容总是并置（co-located）的并且一同调度，在共享上下文中运行。Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个相对紧密耦合的应用容器 — 在容器出现之前，在相同的物理机或虚拟机上运行意味着在相同的逻辑主机上运行。&lt;/p&gt;
&lt;p&gt;虽然 Kubernetes 支持多种容器运行时，但 Docker 是最常见的一种运行时，它有助于使用 Docker 术语来描述 Pod。&lt;/p&gt;
&lt;p&gt;Pod 的共享上下文是一组 Linux 命名空间、cgroups、以及其他潜在的资源隔离相关的因素，这些相同的东西也隔离了 Docker 容器。在 Pod 的上下文中，单个应用程序可能还会应用进一步的子隔离。&lt;/p&gt;
&lt;p&gt;Pod 中的所有容器共享一个 IP 地址和端口空间，并且可以通过 &lt;code&gt;localhost&lt;/code&gt; 互相发现。他们也能通过标准的进程间通信（如 SystemV 信号量或 POSIX 共享内存）方式进行互相通信。不同 Pod 中的容器的 IP 地址互不相同，没有 &lt;a href=&#34;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&#34;&gt;特殊配置&lt;/a&gt; 就不能使用 IPC 进行通信。这些容器之间经常通过 Pod IP 地址进行通信。&lt;/p&gt;
&lt;p&gt;Pod 中的应用也能访问共享 &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/&#34;&gt;卷&lt;/a&gt;，共享卷是 Pod 定义的一部分，可被用来挂载到每个应用的文件系统上。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; 体系的术语中，Pod 被建模为一组具有共享命名空间和共享文件系统&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/&#34;&gt;卷&lt;/a&gt; 的 Docker 容器。&lt;/p&gt;
&lt;p&gt;与单个应用程序容器一样，Pod 被认为是相对短暂的（而不是持久的）实体。如 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/&#34;&gt;Pod 的生命周期&lt;/a&gt; 所讨论的那样：Pod 被创建、给它指定一个唯一 ID（UID）、被调度到节点、在节点上存续直到终止（取决于重启策略）或被删除。如果 &lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/nodes/&#34;&gt;节点&lt;/a&gt; 宕机，调度到该节点上的 Pod 会在一个超时周期后被安排删除。给定 Pod （由 UID 定义）不会重新调度到新节点；相反，它会被一个完全相同的 Pod 替换掉，如果需要甚至连 Pod 名称都可以一样，除了 UID 是新的(更多信息请查阅 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/&#34;&gt;副本控制器（replication controller）&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;当某些东西被说成与 Pod（如卷）具有相同的生命周期时，这表明只要 Pod（具有该 UID）存在，它就存在。如果出于任何原因删除了该 Pod，即使创建了相同的 Pod，相关的内容（例如卷）也会被销毁并重新创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/aecab1f649bc640ebef1f05581bfcc91a48038c4/728d6/images/docs/pod.svg&#34; alt=&#34;pod&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一个多容器 Pod，其中包含一个文件拉取器和一个 Web 服务器，该 Web 服务器使用持久卷在容器之间共享存储&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;设计-pod-的目的&#34;&gt;设计 Pod 的目的&lt;/h2&gt;
&lt;h3 id=&#34;管理&#34;&gt;管理&lt;/h3&gt;
&lt;p&gt;Pod 是形成内聚服务单元的多个协作过程模式的模型。它们提供了一个比它们的应用组成集合更高级的抽象，从而简化了应用的部署和管理。Pod 可以用作部署、水平扩展和制作副本的最小单元。在 Pod 中，系统自动处理多个容器的在并置运行（协同调度）、生命期共享（例如，终止），协同复制、资源共享和依赖项管理。&lt;/p&gt;
&lt;h3 id=&#34;资源共享和通信&#34;&gt;资源共享和通信&lt;/h3&gt;
&lt;p&gt;Pod 使它的组成容器间能够进行数据共享和通信。&lt;/p&gt;
&lt;p&gt;Pod 中的应用都使用相同的网络命名空间（相同 IP 和 端口空间），而且能够互相“发现”并使用 &lt;code&gt;localhost&lt;/code&gt; 进行通信。因此，在 Pod 中的应用必须协调它们的端口使用情况。每个 Pod 在扁平的共享网络空间中具有一个 IP 地址，该空间通过网络与其他物理计算机和 Pod 进行全面通信。&lt;/p&gt;
&lt;p&gt;Pod 中的容器获取的系统主机名与为 Pod 配置的 &lt;code&gt;name&lt;/code&gt; 相同。&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34;&gt;网络&lt;/a&gt; 部分提供了更多有关此内容的信息。&lt;/p&gt;
&lt;p&gt;Pod 除了定义了 Pod 中运行的应用程序容器之外，Pod 还指定了一组共享存储卷。该共享存储卷能使数据在容器重新启动后继续保留，并能在 Pod 内的应用程序之间共享。&lt;/p&gt;
&lt;h2 id=&#34;使用-pod&#34;&gt;使用 Pod&lt;/h2&gt;
&lt;p&gt;Pod 可以用于托管垂直集成的应用程序栈（例如，LAMP），但最主要的目的是支持位于同一位置的、共同管理的工具程序，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容管理系统、文件和数据加载器、本地缓存管理器等。&lt;/li&gt;
&lt;li&gt;日志和检查点备份、压缩、旋转、快照等。&lt;/li&gt;
&lt;li&gt;数据更改监视器、日志跟踪器、日志和监视适配器、事件发布器等。&lt;/li&gt;
&lt;li&gt;代理、桥接器和适配器&lt;/li&gt;
&lt;li&gt;控制器、管理器、配置器和更新器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，不会用单个 Pod 来运行同一应用程序的多个实例。&lt;/p&gt;
&lt;p&gt;有关详细说明，请参考 &lt;a href=&#34;https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns&#34;&gt;分布式系统工具包：组合容器的模式&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;可考虑的备选方案&#34;&gt;可考虑的备选方案&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;为什么不在单个（Docker）容器中运行多个程序？&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透明度。Pod 内的容器对基础设施可见，使得基础设施能够向这些容器提供服务，例如进程管理和资源监控。这为用户提供了许多便利。&lt;/li&gt;
&lt;li&gt;解耦软件依赖关系。可以独立地对单个容器进行版本控制、重新构建和重新部署。Kubernetes 有一天甚至可能支持单个容器的实时更新。&lt;/li&gt;
&lt;li&gt;易用性。用户不需要运行他们自己的进程管理器、也不用担心信号和退出代码传播等。&lt;/li&gt;
&lt;li&gt;效率。因为基础结构承担了更多的责任，所以容器可以变得更加轻量化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;为什么不支持基于亲和性的容器协同调度？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这种处理方法尽管可以提供同址，但不能提供 Pod 的大部分好处，如资源共享、IPC、有保证的命运共享和简化的管理&lt;/p&gt;
&lt;h2 id=&#34;pod-的持久性或稀缺性&#34;&gt;Pod 的持久性（或稀缺性）&lt;/h2&gt;
&lt;p&gt;不得将 Pod 视为持久实体。它们无法在调度失败、节点故障或其他驱逐策略（例如由于缺乏资源或在节点维护的情况下）中生存。&lt;/p&gt;
&lt;p&gt;一般来说，用户不需要直接创建 Pod。他们几乎都是使用控制器进行创建，即使对于单例的 Pod 创建也一样使用控制器，例如 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployments&lt;/a&gt;。控制器提供集群范围的自修复以及副本数和滚动管理。像 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset.md&#34;&gt;StatefulSet&lt;/a&gt; 这样的控制器还可以提供支持有状态的 Pod。&lt;/p&gt;
&lt;p&gt;在集群调度系统中，使用 API 合集作为面向用户的主要原语是比较常见的，包括 &lt;a href=&#34;https://research.google.com/pubs/pub43438.html&#34;&gt;Borg&lt;/a&gt;、&lt;a href=&#34;https://mesosphere.github.io/marathon/docs/rest-api.html&#34;&gt;Marathon&lt;/a&gt;、&lt;a href=&#34;http://aurora.apache.org/documentation/latest/reference/configuration/#job-schema&#34;&gt;Aurora&lt;/a&gt;、和 &lt;a href=&#34;https://www.slideshare.net/Docker/aravindnarayanan-facebook140613153626phpapp02-37588997&#34;&gt;Tupperware&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Pod 暴露为原语是为了便于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度器和控制器可插拔性&lt;/li&gt;
&lt;li&gt;支持 Pod 级别的操作，而不需要通过控制器 API &amp;ldquo;代理&amp;rdquo; 它们&lt;/li&gt;
&lt;li&gt;Pod 生命与控制器生命的解耦，如自举&lt;/li&gt;
&lt;li&gt;控制器和服务的解耦 — 端点控制器只监视 Pod&lt;/li&gt;
&lt;li&gt;kubelet 级别的功能与集群级别功能的清晰组合 — kubelet 实际上是 &amp;ldquo;Pod 控制器&amp;rdquo;&lt;/li&gt;
&lt;li&gt;高可用性应用程序期望在 Pod 终止之前并且肯定要在 Pod 被删除之前替换 Pod，例如在计划驱逐或镜像预先拉取的情况下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod-的终止&#34;&gt;Pod 的终止&lt;/h2&gt;
&lt;p&gt;因为 Pod 代表在集群中的节点上运行的进程，所以当不再需要这些进程时（与被 KILL 信号粗暴地杀死并且没有机会清理相比），允许这些进程优雅地终止是非常重要的。 用户应该能够请求删除并且知道进程何时终止，但是也能够确保删除最终完成。当用户请求删除 Pod 时，系统会记录在允许强制删除 Pod 之前所期望的宽限期，并向每个容器中的主进程发送 TERM 信号。一旦过了宽限期，KILL 信号就发送到这些进程，然后就从 API 服务器上删除 Pod。如果 Kubelet 或容器管理器在等待进程终止时发生重启，则终止操作将以完整的宽限期进行重试。&lt;/p&gt;
&lt;p&gt;流程示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户发送命令删除 Pod，使用的是默认的宽限期（30秒）&lt;/li&gt;
&lt;li&gt;API 服务器中的 Pod 会随着宽限期规定的时间进行更新，过了这个时间 Pod 就会被认为已 &amp;ldquo;死亡&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;当使用客户端命令查询 Pod 状态时，Pod 显示为 &amp;ldquo;Terminating&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;（和第 3 步同步进行）当 Kubelet 看到 Pod 由于步骤 2 中设置的时间而被标记为 terminating 状态时，它就开始执行关闭 Pod 流程。
&lt;ol&gt;
&lt;li&gt;如果 Pod 的容器之一定义了 &lt;a href=&#34;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-details&#34;&gt;preStop 钩子&lt;/a&gt;，就在容器内部调用它。如果宽限期结束了，但是 &lt;code&gt;preStop&lt;/code&gt; 钩子还在运行，那么就用小的（2 秒）扩展宽限期调用步骤 2。&lt;/li&gt;
&lt;li&gt;给 Pod 内的容器发送 TERM 信号。请注意，并不是所有 Pod 中的容器都会同时收到 TERM 信号，如果它们关闭的顺序很重要，则每个容器可能都需要一个 &lt;code&gt;preStop&lt;/code&gt; 钩子。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;（和第 3 步同步进行）从服务的端点列表中删除 Pod，Pod 也不再被视为副本控制器的运行状态的 Pod 集的一部分。因为负载均衡器（如服务代理）会将其从轮换中删除，所以缓慢关闭的 Pod 无法继续为流量提供服务。&lt;/li&gt;
&lt;li&gt;当宽限期到期时，仍在 Pod 中运行的所有进程都会被 SIGKILL 信号杀死。&lt;/li&gt;
&lt;li&gt;kubelet 将通过设置宽限期为 0 （立即删除）来完成在 API 服务器上删除 Pod 的操作。该 Pod 从 API 服务器中消失，并且在客户端中不再可见。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认情况下，所有删除操作宽限期是 30 秒。&lt;code&gt;kubectl delete&lt;/code&gt; 命令支持 &lt;code&gt;--grace-period=&amp;lt;seconds&amp;gt;&lt;/code&gt; 选项，允许用户覆盖默认值并声明他们自己的宽限期。设置为 &lt;code&gt;0&lt;/code&gt; 会&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod/#force-deletion-of-pods&#34;&gt;强制删除&lt;/a&gt; Pod。您必须指定一个附加标志 &lt;code&gt;--force&lt;/code&gt; 和 &lt;code&gt;--grace-period=0&lt;/code&gt; 才能执行强制删除操作。&lt;/p&gt;
&lt;h3 id=&#34;pod-的强制删除&#34;&gt;Pod 的强制删除&lt;/h3&gt;
&lt;p&gt;强制删除 Pod 被定义为从集群状态与 etcd 中立即删除 Pod。当执行强制删除时，API 服务器并不会等待 kubelet 的确认信息，该 Pod 已在所运行的节点上被终止了。强制执行删除操作会从 API 服务器中立即清除 Pod， 因此可以用相同的名称创建一个新的 Pod。在节点上，设置为立即终止的 Pod 还是会在被强制删除前设置一个小的宽限期。&lt;/p&gt;
&lt;p&gt;强制删除对某些 Pod 可能具有潜在危险，因此应该谨慎地执行。对于 StatefulSet 管理的 Pod，请参考 &lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/force-delete-stateful-set-pod/&#34;&gt;从 StatefulSet 中删除 Pod&lt;/a&gt; 的任务文档。&lt;/p&gt;
&lt;h2 id=&#34;pod-容器的特权模式&#34;&gt;Pod 容器的特权模式&lt;/h2&gt;
&lt;p&gt;Pod 中的任何容器都可以使用容器规范 &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/&#34;&gt;security context&lt;/a&gt; 上的 &lt;code&gt;privileged&lt;/code&gt; 参数启用特权模式。这对于想要使用 Linux 功能（如操纵网络堆栈和访问设备）的容器很有用。容器内的进程几乎可以获得与容器外的进程相同的特权。使用特权模式，将网络和卷插件编写为不需要编译到 kubelet 中的独立的 Pod 应该更容易。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt; 您的容器运行时必须支持特权容器模式才能使用此设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;api-对象&#34;&gt;API 对象&lt;/h2&gt;
&lt;p&gt;Pod 是 Kubernetes REST API 中的顶级资源。 &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#pod-v1-core&#34;&gt;Pod API 对象&lt;/a&gt;定义详细描述了该 Pod 对象。为 Pod 对象创建清单时，请确保指定的名称是有效的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/names#dns-subdomain-names&#34;&gt;DNS 子域名&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pod Lifecycle</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-lifecycle/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-lifecycle/</guid>
      <description>
        
        
        &lt;p&gt;该页面将描述 Pod 的生命周期。&lt;/p&gt;
&lt;h2 id=&#34;pod-phase&#34;&gt;Pod phase&lt;/h2&gt;
&lt;p&gt;Pod 的 &lt;code&gt;status&lt;/code&gt; 定义在 &lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#podstatus-v1-core&#34;&gt;PodStatus&lt;/a&gt; 对象中，其中有一个 &lt;code&gt;phase&lt;/code&gt; 字段。&lt;/p&gt;
&lt;p&gt;Pod 的运行阶段（phase）是 Pod 在其生命周期中的简单宏观概述。该阶段并不是对容器或 Pod 的综合汇总，也不是为了做为综合状态机。&lt;/p&gt;
&lt;p&gt;Pod 运行阶段值的数量和含义是严格指定的。除了本文档中列举的内容外，不应该再假定 Pod 有其他的 &lt;code&gt;phase&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;phase&lt;/code&gt; 可能的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂起（Pending）：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像的时间，这可能需要花点时间。&lt;/li&gt;
&lt;li&gt;运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。&lt;/li&gt;
&lt;li&gt;成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启。&lt;/li&gt;
&lt;li&gt;失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止。&lt;/li&gt;
&lt;li&gt;未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod-conditions&#34;&gt;Pod conditions&lt;/h2&gt;
&lt;p&gt;Pod 有一个 PodStatus 对象，其中包含一个 &lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#podcondition-v1-core&#34;&gt;PodCondition&lt;/a&gt; 数组。 PodCondition 数组的每个元素都有六个可能的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lastProbeTime&lt;/code&gt; 字段提供最后一次探测 Pod condition 的时间戳。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastTransitionTime&lt;/code&gt; 字段提供 Pod 最后一次从一种状态过渡到另一种状态的时间戳。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt; 字段是人类可读的消息，指示有关过渡的详细信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reason&lt;/code&gt; 字段是 condition 最后一次过渡的原因，该原因用唯一的、驼峰式的、一个词表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; 字段是一个字符串，可能的值有 &amp;ldquo;&lt;code&gt;True&lt;/code&gt;&amp;quot;、&amp;quot;&lt;code&gt;False&lt;/code&gt;&amp;rdquo; 和 &amp;ldquo;&lt;code&gt;Unknown&lt;/code&gt;&amp;quot;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 字段是一个字符串，具有以下可能的值：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PodScheduled&lt;/code&gt;：已将Pod调度到一个节点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ready&lt;/code&gt;：该 Pod 能够处理请求，应将其添加到所有匹配服务的负载均衡池中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initialized&lt;/code&gt;：所有&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers&#34;&gt;初始化容器&lt;/a&gt;已成功启动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContainersReady&lt;/code&gt;：Pod 中的所有容器均已准备就绪。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器探针&#34;&gt;容器探针&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#probe-v1-core&#34;&gt;探针&lt;/a&gt; 是由 &lt;a href=&#34;https://kubernetes.io/docs/admin/kubelet/&#34;&gt;kubelet&lt;/a&gt; 对容器执行的定期诊断。要执行诊断，kubelet 调用由容器实现的 &lt;a href=&#34;https://godoc.org/k8s.io/kubernetes/pkg/api/v1#Handler&#34;&gt;Handler&lt;/a&gt;。有三种类型的处理程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#execaction-v1-core&#34;&gt;ExecAction&lt;/a&gt;：在容器内执行指定命令。如果命令退出时状态码为 0 则认为诊断成功。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#tcpsocketaction-v1-core&#34;&gt;TCPSocketAction&lt;/a&gt;：对容器 IP 地址上指定的端口进行 TCP 检查。如果端口是开放的，则诊断被认为是成功的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#httpgetaction-v1-core&#34;&gt;HTTPGetAction&lt;/a&gt;：对容器的 IP 地址上指定的端口和路径执行 HTTP Get 请求。如果响应的状态码大于等于200 且小于 400，则诊断被认为是成功的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次探测都将获得以下三种结果之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功（Success）：容器通过了诊断。&lt;/li&gt;
&lt;li&gt;失败（Failure）：容器未通过诊断。&lt;/li&gt;
&lt;li&gt;未知（Unknown）：诊断失败，因此不会采取任何行动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kubelet 可以选择对正在运行的 Container 进行三种探针的执行并对其做出反应：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;livenessProbe&lt;/code&gt;：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy&#34;&gt;重启策略&lt;/a&gt; 的影响。如果容器不提供存活探针，则默认状态为 &lt;code&gt;Success&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readinessProbe&lt;/code&gt;：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 &lt;code&gt;Failure&lt;/code&gt;。如果容器不提供就绪探针，则默认状态为 &lt;code&gt;Success&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startupProbe&lt;/code&gt;: 指示容器中的应用是否已经启动。如果提供了启动探测（startup probe），则禁用所有其他探测，直到它成功为止。如果启动探测失败，kubelet 将杀死容器，容器服从其重启策略进行重启。如果容器没有提供启动探测，则默认状态为成功&lt;code&gt;Success&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么时候应该使用存活探针livenessprobe&#34;&gt;什么时候应该使用存活探针（livenessProbe）？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.0 [stable]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果容器中的进程能够在遇到问题或不健康的情况下能够自行崩溃，则不一定需要存活探针; kubelet 将根据 Pod 的&lt;code&gt;restartPolicy&lt;/code&gt; 自动执行正确的操作。&lt;/p&gt;
&lt;p&gt;如果您希望容器在探测失败时被杀死并重新启动，那么请指定一个存活探针，并指定&lt;code&gt;restartPolicy&lt;/code&gt; 为 Always 或 OnFailure。&lt;/p&gt;
&lt;h3 id=&#34;什么时候应该使用就绪探针readinessprobe&#34;&gt;什么时候应该使用就绪探针（readinessProbe）？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.0 [stable]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果您希望仅在探测成功时才开始向 Pod 发送流量，请指定就绪探针。在这种情况下，就绪探针可能与存活探针相同，但是 spec 中的就绪探针的存在意味着 Pod 将在没有接收到任何流量的情况下启动，并且只有在探针探测成功后才开始接收流量。如果您的容器需要在启动过程中加载大型数据、配置文件或迁移，请指定就绪探针。&lt;/p&gt;
&lt;p&gt;如果您希望容器能够自行维护，您可以指定一个就绪探针，该探针检查与存活探针不同的端点。&lt;/p&gt;
&lt;p&gt;请注意，如果您只是想在 Pod 被删除后能够排除请求，则不一定需要使用就绪探针；在删除 Pod 后，无论就绪探针是否存在，Pod 都会自动将自身置于未就绪状态。当等待 Pod 中的容器停止时，Pod 仍处于未完成状态。&lt;/p&gt;
&lt;h3 id=&#34;什么时候应该使用就绪探针startupprobe&#34;&gt;什么时候应该使用就绪探针（startupProbe）？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.16 [stable]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果您的容器通常在超过 &lt;code&gt;initialDelaySeconds + failureThreshold × periodSeconds&lt;/code&gt; 的时间内启动，则应指定一个启动探针，该探针检查与存活探针相同的端点。&lt;code&gt;periodSeconds&lt;/code&gt; 的默认值为 30s。然后，应将其 &lt;code&gt;failureThreshold&lt;/code&gt; 设置得足够高，以允许 Container 启动，而不更改存活探针的默认值。这有助于防止死锁。&lt;/p&gt;
&lt;h2 id=&#34;pod-和容器状态&#34;&gt;Pod 和容器状态&lt;/h2&gt;
&lt;p&gt;有关 Pod 容器状态的详细信息，请参阅 &lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#podstatus-v1-core&#34;&gt;PodStatus&lt;/a&gt; 和 &lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#containerstatus-v1-core&#34;&gt;ContainerStatus&lt;/a&gt;。请注意，报告的 Pod 状态信息取决于当前的 &lt;a href=&#34;https://kubernetes.io/docs/resources-reference/v1.7/#containerstatus-v1-core&#34;&gt;ContainerState&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;容器状态&#34;&gt;容器状态&lt;/h2&gt;
&lt;p&gt;一旦 Pod 被调度器分配到节点后，kubelet 将开始使用容器运行时来创建容器。容器有三种可能的状态：Waiting、Running 和 Terminated。您可以使用 &lt;code&gt;kubectl describe pod [POD_NAME]&lt;/code&gt; 来检查容器的状态。Pod 中每个容器的状态将会被显示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Waiting&lt;/code&gt;: 容器的默认状态。如果容器未处于 Running 或 Terminated 状态，则处于 Waiting 状态。处于 Waiting 状态的容器仍会运行其所需的操作，例如拉取镜像，应用秘密等。关于该状态的消息和原因会伴随着该状态显示，以提供更多的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;Waiting&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Reason&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;ErrImagePull&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Running&lt;/code&gt;: 表示容器正在执行，没有问题。 &lt;code&gt;postStart&lt;/code&gt; 钩子（如果有）在容器进入 Running 状态之前执行。此状态还显示容器进入 Running 状态的时间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;Running&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Started&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;Wed, 30 Jan 2019 16:46:38 +0530&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Terminated&lt;/code&gt;: 表示容器已完成其执行并已停止运行。当容器成功完成执行或由于某种原因失败时，容器就会进入该容器。无论如何，都会显示原因和退出代码，以及容器的开始和结束时间。在容器进入 Terminated 之前，执行 &lt;code&gt;preStop&lt;/code&gt; 挂钩（如果有）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;Terminated&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Reason&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;Completed&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Exit Code&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Started&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;Wed, 30 Jan 2019 11:45:26 +0530&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Finished&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;Wed, 30 Jan 2019 11:45:26 +0530&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod-就绪&#34;&gt;Pod 就绪&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.14 [stable]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;您的应用程序可以向 PodStatus 注入额外的反馈或信号：&lt;em&gt;Pod readiness&lt;/em&gt;。要使用此功能，请在 PodSpec 中设置 &lt;code&gt;readinessGates&lt;/code&gt; 以指定 kubelet 为 Pod 就绪评估的其他条件列表。&lt;/p&gt;
&lt;p&gt;Readiness gates 由 Pod 的 &lt;code&gt;status.condition&lt;/code&gt; 字段的当前状态决定。如果 Kubernetes 在 Pod 的 &lt;code&gt;status.conditions&lt;/code&gt; 字段中找不到这样的条件，则该条件的状态默认为“&lt;code&gt;False&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;这是一个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;readinessGates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;conditionType&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;www.example.com/feature-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;status&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;conditions&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Ready                             &lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# a built in PodCondition&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;status&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;lastProbeTime&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;lastTransitionTime&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2018-01-01T00:00:00Z&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;www.example.com/feature-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# an extra PodCondition&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;status&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;lastProbeTime&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;lastTransitionTime&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2018-01-01T00:00:00Z&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containerStatuses&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containerID&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker://abcd...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ready&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您添加的 Pod 条件必须具有符合Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set&#34;&gt;label key format&lt;/a&gt; 的名称。&lt;/p&gt;
&lt;h3 id=&#34;pod-就绪状态&#34;&gt;Pod 就绪状态&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubectl patch&lt;/code&gt; 命令不支持修补对象状态。要为 Pod 设置这些 &lt;code&gt;status.conditions&lt;/code&gt;，应用程序和 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&#34;&gt;操作员&lt;/a&gt; 应使用 &lt;code&gt;PATCH&lt;/code&gt; 操作。您可以使用 &lt;a href=&#34;https://kubernetes.io/docs/reference/using-api/client-libraries/&#34;&gt;Kubernetes client library&lt;/a&gt; 编写代码，来为 Pod 就绪设置自定义 Pod 条件。&lt;/p&gt;
&lt;p&gt;对于使用自定义条件的 Pod，仅当以下两个声明均适用时，该 Pod 才被评估为就绪：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 中的所有容器均已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadinessGates&lt;/code&gt; 中指定的所有条件均为 &lt;code&gt;True&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 Pod 的容器准备就绪但至少一个自定义条件是缺失的或 &lt;code&gt;False&lt;/code&gt; 时，kubelet 将 Pod 的条件设置为 &lt;code&gt;ContainersReady&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;重启策略&#34;&gt;重启策略&lt;/h2&gt;
&lt;p&gt;PodSpec 中有一个 &lt;code&gt;restartPolicy&lt;/code&gt; 字段，可能的值为 Always、OnFailure 和 Never。默认为 Always。 &lt;code&gt;restartPolicy&lt;/code&gt; 适用于 Pod 中的所有容器。&lt;code&gt;restartPolicy&lt;/code&gt; 仅指通过同一节点上的 kubelet 重新启动容器。失败的容器由 kubelet 以五分钟为上限的指数退避延迟（10秒，20秒，40秒&amp;hellip;）重新启动，并在成功执行十分钟后重置。如 &lt;a href=&#34;https://kubernetes.io/docs/user-guide/pods/#durability-of-pods-or-lack-thereof&#34;&gt;Pod 文档&lt;/a&gt; 中所述，一旦绑定到一个节点，Pod 将永远不会重新绑定到另一个节点。&lt;/p&gt;
&lt;h2 id=&#34;pod-的生命&#34;&gt;Pod 的生命&lt;/h2&gt;
&lt;p&gt;一般来说，Pod 会一直保留，直到人为或 &lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/controller/&#34;&gt;控制器&lt;/a&gt; 进程明确地销毁他们。当 Pod 的数量超过配置的阈值（取决于 kube-controller-manager 中的 &lt;code&gt;terminate-pod-gc-threshold&lt;/code&gt;）时，控制平面将清理终止的 Pod（阶段为成功或失败）。这样可以避免在创建和终止 Pod 时资源泄漏。&lt;/p&gt;
&lt;p&gt;有多种创建Pod的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对不希望终止的 Pod 使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployment&lt;/a&gt;、&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/&#34;&gt;ReplicaSet&lt;/a&gt; 或 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&#34;&gt;StatefulSet&lt;/a&gt;，例如 Web 服务器。&lt;/li&gt;
&lt;li&gt;对希望在工作完成后终止的 Pod 使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/&#34;&gt;Job&lt;/a&gt;，例如批量计算。Job 仅适用于 &lt;code&gt;restartPolicy&lt;/code&gt; 为 &lt;code&gt;OnFailure&lt;/code&gt; 或 &lt;code&gt;Never&lt;/code&gt; 的 Pod。&lt;/li&gt;
&lt;li&gt;对需要在每个合格节点上运行一个的 Pod 使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&#34;&gt;DaemonSet&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有工作负载资源都包含一个 PodSpec。建议创建适当的工作负载资源，并让资源的控制器为您创建Pod，而不是自己直接创建Pods。&lt;/p&gt;
&lt;p&gt;如果某个节点死亡或与集群的其余部分断开连接，则 Kubernetes 将应用一个策略将丢失节点上的所有 Pod 的 &lt;code&gt;phase&lt;/code&gt; 设置为 Failed。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;h3 id=&#34;高级-liveness-探针示例&#34;&gt;高级 liveness 探针示例&lt;/h3&gt;
&lt;p&gt;存活探针由 kubelet 来执行，因此所有的请求都在 kubelet 的网络命名空间中进行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;test&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;liveness&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;liveness-http&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- /server&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;k8s.gcr.io/liveness&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;livenessProbe&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;httpGet&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 当没有定义 &amp;#34;host&amp;#34; 时，使用 &amp;#34;PodIP&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# host: my-host&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 当没有定义 &amp;#34;scheme&amp;#34; 时，使用 &amp;#34;HTTP&amp;#34; scheme 只允许 &amp;#34;HTTP&amp;#34; 和 &amp;#34;HTTPS&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# scheme: HTTPS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/healthz&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;8080&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;httpHeaders&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;X-Custom-Header&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Awesome&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;initialDelaySeconds&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;timeoutSeconds&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;liveness&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;状态示例&#34;&gt;状态示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pod 中只有一个容器并且正在运行。容器成功退出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;记录完成事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;restartPolicy&lt;/code&gt; 为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OnFailure：Pod &lt;code&gt;phase&lt;/code&gt; 变成 Succeeded。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never：Pod &lt;code&gt;phase&lt;/code&gt; 变成 Succeeded。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 中只有一个容器并且正在运行。容器退出失败。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;记录失败事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;restartPolicy&lt;/code&gt; 为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OnFailure：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never：Pod &lt;code&gt;phase&lt;/code&gt; 变成 Failed。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 中有两个容器并且正在运行。容器 1 退出失败。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;记录失败事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;restartPolicy&lt;/code&gt; 为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;li&gt;OnFailure：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;li&gt;Never：不重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果容器 1 没有处于运行状态，并且容器 2 退出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;记录失败事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;restartPolicy&lt;/code&gt; 为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OnFailure：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。
- Never：Pod &lt;code&gt;phase&lt;/code&gt; 变成 Failed。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 中只有一个容器并处于运行状态。容器运行时内存超出限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容器以失败状态终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录 OOM 事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;restartPolicy&lt;/code&gt; 为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OnFailure：重启容器；Pod &lt;code&gt;phase&lt;/code&gt; 仍为 Running。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never: 记录失败事件；Pod &lt;code&gt;phase&lt;/code&gt; 变成 Failed。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 正在运行，磁盘故障：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;杀掉所有容器。&lt;/li&gt;
&lt;li&gt;记录适当事件。&lt;/li&gt;
&lt;li&gt;Pod &lt;code&gt;phase&lt;/code&gt; 变成 Failed。&lt;/li&gt;
&lt;li&gt;如果使用控制器来运行，Pod 将在别处重建。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 正在运行，其节点分段退出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点控制器等待直到超时。&lt;/li&gt;
&lt;li&gt;节点控制器将 Pod &lt;code&gt;phase&lt;/code&gt; 设置为 Failed。&lt;/li&gt;
&lt;li&gt;如果是用控制器来运行，Pod 将在别处重建。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Init 容器</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/init-containers/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/init-containers/</guid>
      <description>
        
        
        &lt;p&gt;本页提供了 Init 容器的概览：它是一种专用的容器，在 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/&#34;&gt;Pod&lt;/a&gt; 内的应用容器启动之前运行。Init 容器包括一些应用镜像中不存在的实用工具和安装脚本。&lt;/p&gt;
&lt;p&gt;你可以在 Pod 的规格信息中与 &lt;code&gt;containers&lt;/code&gt; 数组（应用容器的描述）同级的位置指定 Init 容器。&lt;/p&gt;
&lt;h2 id=&#34;理解-init-容器&#34;&gt;理解 Init 容器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/&#34;&gt;Pod&lt;/a&gt; 可以包含多个容器，应用运行在这些容器里面，同时 Pod 也可以有一个或多个先于应用容器启动的 Init 容器。&lt;/p&gt;
&lt;p&gt;Init 容器与普通容器完全一样，除了如下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init 容器始终会运行到完成状态。&lt;/li&gt;
&lt;li&gt;每个 init 容器必须成功完成才能启动下一个容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Pod 的 Init 容器失败，Kubernetes 会不断地重启该 Pod，直到 Init 容器成功为止。然而，如果 Pod 对应的 &lt;code&gt;restartPolicy&lt;/code&gt; 值为 Never，它不会重新启动。&lt;/p&gt;
&lt;p&gt;为 Pod 指定 Init 容器，需要在 Pod 的 spec 中添加 &lt;code&gt;initContainers&lt;/code&gt; 字段， 该字段內以&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#container-v1-core&#34;&gt;Container&lt;/a&gt; 类型对象数组的形式组织，和应用的 &lt;code&gt;containers&lt;/code&gt; 数组同级相邻。 Init 容器的状态在 &lt;code&gt;status.initContainerStatuses&lt;/code&gt; 字段中以容器状态数组的格式返回（类似 &lt;code&gt;status.containerStatuses&lt;/code&gt; 字段）。&lt;/p&gt;
&lt;h3 id=&#34;与普通容器的不同之处&#34;&gt;与普通容器的不同之处&lt;/h3&gt;
&lt;p&gt;Init 容器支持应用容器的全部字段和特性，包括资源限制、数据卷和安全设置。 然而，Init 容器对资源请求和限制的处理稍有不同，在下面 &lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/#%E8%B5%84%E6%BA%90&#34;&gt;资源&lt;/a&gt; 处有说明。&lt;/p&gt;
&lt;p&gt;同时 Init 容器不支持 &lt;code&gt;lifecycle&lt;/code&gt;、 &lt;code&gt;livenessProbe&lt;/code&gt;、&lt;code&gt;readinessProbe&lt;/code&gt; 或 &lt;code&gt;startupProbe&lt;/code&gt;，因为它们必须在 Pod 就绪之前运行完成。&lt;/p&gt;
&lt;p&gt;如果为一个 Pod 指定了多个 Init 容器，kubelet 会按顺序逐个运行这些容器。每个 Init 容器必须运行成功，下一个才能够运行。当所有的 Init 容器运行完成时，Kubernetes 才会为 Pod 初始化应用容器并像平常一样运行。&lt;/p&gt;
&lt;h2 id=&#34;使用-init-容器&#34;&gt;使用 Init 容器&lt;/h2&gt;
&lt;p&gt;因为 Init 容器具有与应用容器分离的单独镜像，因此他们在启动相关代码方面具有一些优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init 容器可以包含一些安装过程中应用容器中不存在的实用工具或个性化代码。例如，没有必要仅为了在安装过程中使用类似 &lt;code&gt;sed&lt;/code&gt;、 &lt;code&gt;awk&lt;/code&gt;、 &lt;code&gt;python&lt;/code&gt; 或 &lt;code&gt;dig&lt;/code&gt; 这样的工具而去 &lt;code&gt;FROM&lt;/code&gt; 一个镜像来生成一个新的镜像。&lt;/li&gt;
&lt;li&gt;应用镜像的构建者和部署者可以各自独立工作，而没有必要联合构建一个单独的应用镜像。&lt;/li&gt;
&lt;li&gt;Init 容器能以不同于Pod内应用容器的文件系统视图运行。因此，Init 容器可具有访问 &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34;&gt;Secrets&lt;/a&gt; 的权限，而应用容器不能够访问。&lt;/li&gt;
&lt;li&gt;由于 Init 容器必须在应用容器启动之前运行完成，因此 Init 容器提供了一种机制来阻塞或延迟应用容器的启动，直到满足了一组先决条件。一旦前置条件满足，Pod内的所有的应用容器会并行启动。&lt;/li&gt;
&lt;li&gt;Init 容器可以安全地运行这些工具，避免这些工具导致应用镜像的安全性降低。通过将不必要的工具分开，您可以限制应用容器镜像的攻击面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;p&gt;下面是一些如何使用 Init 容器的想法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;等待一个 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;Service&lt;/a&gt; 完成创建，通过类似如下的单行 shell 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;1..100&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;do&lt;/span&gt; sleep 1; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; dig myservice; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;exit&lt;/span&gt; 0; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;fi&lt;/span&gt;; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;done&lt;/span&gt;; &lt;span style=&#34;color:#a2f&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册这个 Pod 到远程服务器，通过在命令中调用 API，类似如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST http://&lt;span style=&#34;color:#b8860b&#34;&gt;$MANAGEMENT_SERVICE_HOST&lt;/span&gt;:&lt;span style=&#34;color:#b8860b&#34;&gt;$MANAGEMENT_SERVICE_PORT&lt;/span&gt;/register -d &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;instance=$(&amp;lt;POD_NAME&amp;gt;)&amp;amp;ip=$(&amp;lt;POD_IP&amp;gt;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在启动应用容器之前等一段时间，使用类似命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sleep &lt;span style=&#34;color:#666&#34;&gt;60&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;克隆 Git 仓库到 &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/&#34;&gt;Volume&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将配置值放到配置文件中，运行模板工具为主应用容器动态地生成配置文件。例如，在配置文件中存放 &lt;code&gt;POD_IP&lt;/code&gt; 值，并使用 Jinja 生成主应用配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-init-容器-1&#34;&gt;使用 Init 容器&lt;/h3&gt;
&lt;p&gt;下面的例子定义了一个具有 2 个 Init 容器的简单 Pod。第一个等待 &lt;code&gt;myservice&lt;/code&gt; 启动，第二个等待 &lt;code&gt;mydb&lt;/code&gt; 启动。 一旦这两个 Init容器 都启动完成，Pod 将启动 &lt;code&gt;spec&lt;/code&gt; 区域中的应用容器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;myapp-pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;myapp&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;myapp-container&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;busybox:1.28&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;echo The app is running! &amp;amp;&amp;amp; sleep 3600&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;initContainers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;init-myservice&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;busybox:1.28&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;init-mydb&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;busybox:1.28&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以通过运行以下命令启动此Pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl apply -f myapp.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pod/myapp-pod created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并使用以下命令检查其状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl get -f myapp.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME        READY     STATUS     RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myapp-pod   0/1       Init:0/2   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;          6m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或了解更多详情：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl describe -f myapp.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name:          myapp-pod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Namespace:     default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Labels:        &lt;span style=&#34;color:#b8860b&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;myapp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Status:        Pending
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Init Containers:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  init-myservice:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    State:         Running
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  init-mydb:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    State:         Waiting
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Reason:      PodInitializing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ready:         False
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Containers:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  myapp-container:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    State:         Waiting
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Reason:      PodInitializing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ready:         False
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Events:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FirstSeen    LastSeen    Count    From                      SubObjectPath                           Type          Reason        Message
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ---------    --------    -----    ----                      -------------                           --------      ------        -------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  16s          16s         &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;default-scheduler &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;                                              Normal        Scheduled     Successfully assigned myapp-pod to 172.17.4.201
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  16s          16s         &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kubelet 172.17.4.201&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;    spec.initContainers&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;init-myservice&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;     Normal        Pulling       pulling image &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;busybox&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  13s          13s         &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kubelet 172.17.4.201&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;    spec.initContainers&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;init-myservice&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;     Normal        Pulled        Successfully pulled image &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;busybox&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  13s          13s         &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kubelet 172.17.4.201&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;    spec.initContainers&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;init-myservice&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;     Normal        Created       Created container with docker id 5ced34a04634; Security:&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;seccomp&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;unconfined&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  13s          13s         &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kubelet 172.17.4.201&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;    spec.initContainers&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;init-myservice&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;     Normal        Started       Started container with docker id 5ced34a04634
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如需查看 Pod 内 Init 容器的日志，请执行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl logs myapp-pod -c init-myservice &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Inspect the first init container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl logs myapp-pod -c init-mydb      &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Inspect the second init container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，Init 容器将会等待至发现名称为 &lt;code&gt;mydb&lt;/code&gt; 和 &lt;code&gt;myservice&lt;/code&gt; 的 Service。&lt;/p&gt;
&lt;p&gt;如下为创建这些 Service 的配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;myservice&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;protocol&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9376&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mydb&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;protocol&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9377&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 &lt;code&gt;mydb&lt;/code&gt; 和 &lt;code&gt;myservice&lt;/code&gt; service 的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create -f services.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service/myservice created
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service/mydb created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，您将能看到这些 Init 容器执行完毕，并且 &lt;code&gt;my-app&lt;/code&gt; Pod 进入了 Running 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl get -f myapp.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME        READY     STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myapp-pod   1/1       Running   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;          9m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个简单的例子应该能为你创建自己的 Init 容器提供一些启发。 &lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/#what-s-next&#34;&gt;What&amp;rsquo;s next&lt;/a&gt; 部分提供了更详细例子的链接。&lt;/p&gt;
&lt;h2 id=&#34;具体行为&#34;&gt;具体行为&lt;/h2&gt;
&lt;p&gt;在 Pod 启动过程中，kubelet 会延迟运行 Init 容器，直到网络和存储就绪为止。然后，kubelet 按照 Pod 规范中出现的顺序运行 Pod 的 Init 容器。&lt;/p&gt;
&lt;p&gt;每个 Init 容器成功退出后才会启动下一个 Init容器。如果应为运行或退出时失败引发容器启动失败，它会根据 Pod 的 &lt;code&gt;restartPolicy&lt;/code&gt; 策略进行重试。然而，如果 Pod 的 &lt;code&gt;restartPolicy&lt;/code&gt; 设置为 Always，Init 容器失败时会使用 &lt;code&gt;restartPolicy&lt;/code&gt; 的 OnFailure 策略。&lt;/p&gt;
&lt;p&gt;在所有的 Init 容器没有成功之前，Pod 将不会变成  &lt;code&gt;Ready&lt;/code&gt; 状态。Init 容器的端口将不会在 Service 中进行聚集。 正在初始化中的 Pod 处于 &lt;code&gt;Pending&lt;/code&gt; 状态，但会将条件 &lt;code&gt;Initializing&lt;/code&gt; 设置为 true。&lt;/p&gt;
&lt;p&gt;如果 Pod &lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/#pod-restart-reasons&#34;&gt;重启&lt;/a&gt;，所有 Init 容器必须重新执行。&lt;/p&gt;
&lt;p&gt;对 Init 容器 spec 的修改仅限于容器的 image 字段。更改 Init 容器的 image 字段，等同于重启该 Pod。&lt;/p&gt;
&lt;p&gt;因为 Init 容器可能会被重启、重试或者重新执行，所以 Init 容器的代码应该是幂等的。 特别地，基于 &lt;code&gt;EmptyDirs&lt;/code&gt; 写文件的代码，应该对输出文件可能已经存在做好准备。&lt;/p&gt;
&lt;p&gt;Init 容器具有应用容器的所有字段。 然而 Kubernetes 禁止使用 &lt;code&gt;readinessProbe&lt;/code&gt;，因为 Init 容器不能定义不同于完成（completion）的就绪（readiness）。 这一点会在校验时强制执行。&lt;/p&gt;
&lt;p&gt;在 Pod 上使用 &lt;code&gt;activeDeadlineSeconds&lt;/code&gt;和在容器上使用 &lt;code&gt;livenessProbe&lt;/code&gt; 可以避免 Init 容器一直重复失败。 &lt;code&gt;activeDeadlineSeconds&lt;/code&gt; 时间包含了 Init 容器启动的时间。&lt;/p&gt;
&lt;p&gt;在 Pod 中的每个应用容器和 Init 容器的名称必须唯一；与任何其它容器共享同一个名称，会在校验时抛出错误。&lt;/p&gt;
&lt;h3 id=&#34;资源&#34;&gt;资源&lt;/h3&gt;
&lt;p&gt;给定 Init 容器的执行顺序下，资源使用适用于如下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 Init 容器上定义的对任何特定资源的 request 或 limit 的最大值，作为 &lt;em&gt;有效的初始 request/limit&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Pod 对资源的有效 request/limit 是如下两者的较大者：
&lt;ul&gt;
&lt;li&gt;所有应用容器对某个资源的 request/limit 之和&lt;/li&gt;
&lt;li&gt;对某个资源的有效初始 request/limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于有效 limit/request 完成调度，这意味着 Init 容器能够为初始化过程预留资源，这些资源在 Pod 生命周期过程中并没有被使用。&lt;/li&gt;
&lt;li&gt;Pod 的 &lt;em&gt;有效 QoS 层&lt;/em&gt; ，与 Init 容器和应用容器的一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配额和限制将根据有效的 Pod request 和 limit 进行应用。&lt;/p&gt;
&lt;p&gt;Pod 级别的 cgroups 是基于有效 Pod 的 request 和 limit，和调度器相同。&lt;/p&gt;
&lt;h3 id=&#34;pod-重启的原因&#34;&gt;Pod 重启的原因&lt;/h3&gt;
&lt;p&gt;Pod 重启导致 Init 容器重新执行，主要有如下几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户更新 Pod 的 Spec 导致 Init 容器镜像发生改变。Init 容器镜像的变更会引起 Pod 重启. 应用容器镜像的变更仅会重启应用容器。&lt;/li&gt;
&lt;li&gt;Pod 的基础设施容器（译者注：如 pause 容器）被重启。这种情况不多见，必须由具备Node root 权限访问的人员来完成。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;restartPolicy&lt;/code&gt; 设置为 Always，Pod 中所有容器会终止而强制重启，由于垃圾收集导致 Init 容器的完成记录丢失。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pod Preset</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-preset/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-preset/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.6 [alpha]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本文提供了 PodPreset 的概述。在 Pod 创建时，用户可以使用 PodPreset 对象将特定信息注入 Pod 中，这些信息可以包括 secret、卷、卷挂载和环境变量。&lt;/p&gt;
&lt;h2 id=&#34;理解-pod-preset&#34;&gt;理解 Pod Preset&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Pod Preset&lt;/code&gt; 是一种 API 资源，在 Pod 创建时，用户可以用它将额外的运行时需求信息注入 Pod。 使用&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors&#34;&gt;标签选择器（label selector）&lt;/a&gt;来指定 Pod Preset 所适用的 Pod。&lt;/p&gt;
&lt;p&gt;使用 Pod Preset 使得 Pod 模板编写者不必显式地为每个 Pod 设置所有信息。这样，使用特定服务的 Pod 模板编写者不需要了解该服务的所有细节。&lt;/p&gt;
&lt;p&gt;了解更多的相关背景信息，请参考 &lt;a href=&#34;https://git.k8s.io/community/contributors/design-proposals/service-catalog/pod-preset.md&#34;&gt;PodPreset 设计提案&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;在集群中启用-podpreset&#34;&gt;在集群中启用 PodPreset&lt;/h2&gt;
&lt;p&gt;为了在集群中使用 Pod Preset，您必须确保以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;您已启用 API &lt;code&gt;settings.k8s.io/v1alpha1/podpreset&lt;/code&gt; 类型。例如，可以通过在 API Server 的 &lt;code&gt;--runtime-config&lt;/code&gt; 选项中包含 &lt;code&gt;settings.k8s.io/v1alpha1=true&lt;/code&gt; 来实现。在使用 minikube 的情况下，在启动集群时添加此标志 &lt;code&gt;--extra-config=apiserver.runtime-config=settings.k8s.io/v1alpha1=true&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您已启用 &lt;code&gt;PodPreset&lt;/code&gt; 准入控制器。一种方法是将 &lt;code&gt;PodPreset&lt;/code&gt; 包含在为 API Server 指定的 &lt;code&gt;--enable-admission-plugins&lt;/code&gt; 选项值中。在使用 minikube 的情况下，在启动集群时添加此标志 &lt;code&gt;--extra-config=apiserver.enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,PodPreset&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;podpreset-如何工作&#34;&gt;PodPreset 如何工作&lt;/h2&gt;
&lt;p&gt;Kubernetes 提供了准入控制器（&lt;code&gt;PodPreset&lt;/code&gt;），该控制器被启用时，会将 Pod Preset 应用于传入的 Pod 创建请求中。 当出现 Pod 创建请求时，系统会执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检索所有可用 &lt;code&gt;PodPresets&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;检查 &lt;code&gt;PodPreset&lt;/code&gt; 的标签选择器与要创建的 Pod 的标签是否匹配。&lt;/li&gt;
&lt;li&gt;尝试将 &lt;code&gt;PodPreset&lt;/code&gt; 中定义的各种资源合并到正在创建的 Pod 中。&lt;/li&gt;
&lt;li&gt;发生错误时，抛出一个事件用来记录在 Pod 上的合并错误，同时在 &lt;em&gt;不注入&lt;/em&gt; 任何来自 &lt;code&gt;PodPreset&lt;/code&gt; 的资源的情况下创建 Pod。&lt;/li&gt;
&lt;li&gt;为修改后的 Pod spec 添加注解，来表明它已被 &lt;code&gt;PodPreset&lt;/code&gt; 修改。注解的格式为： &lt;code&gt;podpreset.admission.kubernetes.io/podpreset-&amp;lt;pod-preset name&amp;gt;&amp;quot;: &amp;quot;&amp;lt;resource version&amp;gt;&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个 Pod 可以匹配零个或多个 Pod Preset；并且每个 &lt;code&gt;PodPreset&lt;/code&gt; 可以应用于零个或多个 Pod。当 &lt;code&gt;PodPreset&lt;/code&gt; 应用于一个或多个 Pod 时，Kubernetes 会修改 Pod Spec。对于 &lt;code&gt;Env&lt;/code&gt;、&lt;code&gt;EnvFrom&lt;/code&gt; 和 &lt;code&gt;VolumeMounts&lt;/code&gt; 的改动，Kubernetes 修改 Pod 中所有容器的规格；对于 &lt;code&gt;Volume&lt;/code&gt; 的改动，Kubernetes 修改 Pod Spec。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt; 适当时候，Pod Preset 可以修改 Pod Spec 中的以下字段： - &lt;code&gt;.spec.containers&lt;/code&gt; 字段 - &lt;code&gt;initContainers&lt;/code&gt; 字段（需要 Kubernetes 1.14.0 或更高版本）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;为特定-pod-禁用-pod-preset&#34;&gt;为特定 Pod 禁用 Pod Preset&lt;/h3&gt;
&lt;p&gt;在某些情况下，您希望 Pod 不受任何 Pod Preset 变动的影响。这时，您可以在  Pod Spec 中添加如下格式 &lt;code&gt;podpreset.admission.kubernetes.io/exclude: &amp;quot;true&amp;quot;&lt;/code&gt; 的注解。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pod 拓扑扩展约束</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-topology-spread-constraints/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/pod-topology-spread-constraints/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.16 [alpha]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;您可以使用 &lt;em&gt;拓扑扩展约束&lt;/em&gt; 来控制 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/&#34;&gt;Pod&lt;/a&gt; 在集群内故障域（例如地区，区域，节点和其他用户自定义拓扑域）之间的分布。这可以帮助实现高可用以及提升资源利用率。&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;h3 id=&#34;启用功能&#34;&gt;启用功能&lt;/h3&gt;
&lt;p&gt;确保 &lt;code&gt;EvenPodsSpread&lt;/code&gt; 功能已开启（在 1.16 版本中该功能默认关闭）。阅读&lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/&#34;&gt;功能选项&lt;/a&gt;了解如何开启该功能。&lt;code&gt;EvenPodsSpread&lt;/code&gt; 必须在 &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kube-apiserver/&#34;&gt;API Server&lt;/a&gt; &lt;strong&gt;和&lt;/strong&gt; &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kube-scheduler/&#34;&gt;scheduler&lt;/a&gt; 中都要开启。&lt;/p&gt;
&lt;h3 id=&#34;节点标签&#34;&gt;节点标签&lt;/h3&gt;
&lt;p&gt;拓扑扩展约束依赖于节点标签来标识每个节点所在的拓扑域。例如，一个节点可能具有标签：&lt;code&gt;node=node1,zone=us-east-1a,region=us-east-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假设你拥有一个具有以下标签的 4 节点集群：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME    STATUS   ROLES    AGE     VERSION   LABELS
node1   Ready    &amp;lt;none&amp;gt;   4m26s   v1.16.0   node=node1,zone=zoneA
node2   Ready    &amp;lt;none&amp;gt;   3m58s   v1.16.0   node=node2,zone=zoneA
node3   Ready    &amp;lt;none&amp;gt;   3m17s   v1.16.0   node=node3,zone=zoneB
node4   Ready    &amp;lt;none&amp;gt;   2m43s   v1.16.0   node=node4,zone=zoneB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后从逻辑上看集群如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+---------------+---------------+
|     zoneA     |     zoneB     |
+-------+-------+-------+-------+
| node1 | node2 | node3 | node4 |
+-------+-------+-------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以复用在大多数集群上自动创建和填充的&lt;a href=&#34;https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/&#34;&gt;知名标签&lt;/a&gt;，而不是手动添加标签。&lt;/p&gt;
&lt;h2 id=&#34;pod-的拓扑约束&#34;&gt;Pod 的拓扑约束&lt;/h2&gt;
&lt;h3 id=&#34;api&#34;&gt;API&lt;/h3&gt;
&lt;p&gt;在 1.16 中引入的 &lt;code&gt;pod.spec.topologySpreadConstraints&lt;/code&gt; 字段如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mypod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologySpreadConstraints&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;integer&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;string&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;string&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labelSelector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;object&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以定义一个或多个 &lt;code&gt;topologySpreadConstraint&lt;/code&gt; 来指示 kube-scheduler 如何将每个传入的 Pod 根据与现有的 Pod 的关联关系在集群中部署。字段包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maxSkew&lt;/strong&gt; 描述 Pod 分布不均的程度。这是给定拓扑类型中任意两个拓扑域中匹配的 Pod 之间的最大允许差值。它必须大于零。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;topologyKey&lt;/strong&gt; 是节点标签的键。如果两个节点使用此键标记并且具有相同的标签值，则调度器会将这两个节点视为处于同一拓扑中。调度器试图在每个拓扑域中放置数量均衡的 Pod。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;whenUnsatisfiable&lt;/strong&gt; 指示如果 Pod 不满足扩展约束时如何处理：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DoNotSchedule&lt;/code&gt;（默认）告诉调度器不用进行调度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScheduleAnyway&lt;/code&gt; 告诉调度器在对节点进行优先级排序以最大程度地减少偏斜的同时仍要调度它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;labelSelector&lt;/strong&gt; 用于查找匹配的 Pod。匹配此标签的 Pod 将被统计，以确定相应拓扑域中 Pod 的数量。有关详细信息，请参考 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors&#34;&gt;Label Selectors&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以执行 &lt;code&gt;kubectl explain Pod.spec.topologySpreadConstraints&lt;/code&gt; 命令了解更多关于 topologySpreadConstraints 的信息。&lt;/p&gt;
&lt;h3 id=&#34;示例单个拓扑扩展约束&#34;&gt;示例：单个拓扑扩展约束&lt;/h3&gt;
&lt;p&gt;假设你拥有一个 4 节点集群，其中标记为 &lt;code&gt;foo:bar&lt;/code&gt; 的 3 个 Pod 分别位于 node1，node2 和 node3 中（&lt;code&gt;P&lt;/code&gt; 表示 pod）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+---------------+---------------+
|     zoneA     |     zoneB     |
+-------+-------+-------+-------+
| node1 | node2 | node3 | node4 |
+-------+-------+-------+-------+
|   P   |   P   |   P   |       |
+-------+-------+-------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们希望将传入的 Pod 与现有 Pod 均匀地分布在区域之间，则可以指定字段如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/website/master/content/zh/examples/pods/topology-spread-constraints/one-constraint.yaml&#34;&gt;&lt;code&gt;pods/topology-spread-constraints/one-constraint.yaml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mypod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologySpreadConstraints&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zone&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;DoNotSchedule&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labelSelector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;pause&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;k8s.gcr.io/pause:3.1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;topologyKey: zone&lt;/code&gt; 意味着均匀分布将只应用于存在标签对为 &amp;ldquo;zone:&lt;any value&gt;&amp;rdquo; 的节点上。&lt;code&gt;whenUnsatisfiable: DoNotSchedule&lt;/code&gt; 告诉调度器，如果传入的 Pod 不满足约束，则让它保持挂起状态。&lt;/p&gt;
&lt;p&gt;如果调度器将传入的 Pod 放入 &amp;ldquo;zoneA&amp;rdquo;，Pod 分布将变为 [3, 1]，因此实际的倾斜为 2（3 - 1）。这违反了 &lt;code&gt;maxSkew: 1&lt;/code&gt;。此示例中，传入的 pod 只能放置在 &amp;ldquo;zoneB&amp;rdquo; 上：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+---------------+---------------+      +---------------+---------------+
|     zoneA     |     zoneB     |      |     zoneA     |     zoneB     |
+-------+-------+-------+-------+      +-------+-------+-------+-------+
| node1 | node2 | node3 | node4 |  OR  | node1 | node2 | node3 | node4 |
+-------+-------+-------+-------+      +-------+-------+-------+-------+
|   P   |   P   |   P   |   P   |      |   P   |   P   |  P P  |       |
+-------+-------+-------+-------+      +-------+-------+-------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您可以调整 Pod Spec 以满足各种要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 &lt;code&gt;maxSkew&lt;/code&gt; 更改为更大的值，比如 &amp;ldquo;2&amp;rdquo;，这样传入的 Pod 也可以放在 &amp;ldquo;zoneA&amp;rdquo; 上。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;topologyKey&lt;/code&gt; 更改为 &amp;ldquo;node&amp;rdquo;，以便将 Pod 均匀分布在节点上而不是区域中。在上面的例子中，如果 &lt;code&gt;maxSkew&lt;/code&gt; 保持为 &amp;ldquo;1&amp;rdquo;，那么传入的 pod 只能放在 &amp;ldquo;node4&amp;rdquo; 上。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;whenUnsatisfiable: DoNotSchedule&lt;/code&gt; 更改为 &lt;code&gt;whenUnsatisfiable: ScheduleAnyway&lt;/code&gt;，以确保传入的 Pod 始终可以调度（假设满足其他的调度 API）。但是，最好将其放置在具有较少匹配 Pod 的拓扑域中。（请注意，此优先性与其他内部调度优先级（如资源使用率等）一起进行标准化。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例多个拓扑扩展约束&#34;&gt;示例：多个拓扑扩展约束&lt;/h3&gt;
&lt;p&gt;下面的例子建立在前面例子的基础上。假设你拥有一个 4 节点集群，其中 3 个标记为 &lt;code&gt;foo:bar&lt;/code&gt; 的 pod 分别位于 node1，node2 和 node3 上（&lt;code&gt;P&lt;/code&gt; 表示 pod）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+---------------+---------------+
|     zoneA     |     zoneB     |
+-------+-------+-------+-------+
| node1 | node2 | node3 | node4 |
+-------+-------+-------+-------+
|   P   |   P   |   P   |       |
+-------+-------+-------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以使用 2 个拓扑扩展约束来控制 Pod 在 区域和节点两个维度上进行分布：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/website/master/content/zh/examples/pods/topology-spread-constraints/two-constraints.yaml&#34;&gt;&lt;code&gt;pods/topology-spread-constraints/two-constraints.yaml&lt;/code&gt;&lt;/a&gt; &lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/0901162ab78eb4ff2e9e5dc8b17c3824befc91a6/44ccd/images/copycode.svg&#34; alt=&#34;Copy pods/topology-spread-constraints/two-constraints.yaml to clipboard&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kind: Pod apiVersion: v1 metadata:  name: mypod  labels:    foo: bar spec:  topologySpreadConstraints:  - maxSkew: 1    topologyKey: zone    whenUnsatisfiable: DoNotSchedule    labelSelector:      matchLabels:        foo: bar  - maxSkew: 1    topologyKey: node    whenUnsatisfiable: DoNotSchedule    labelSelector:      matchLabels:        foo: bar  containers:  - name: pause    image: k8s.gcr.io/pause:3.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/pods/topology-spread-constraints/two-constraints.yaml&#34;&gt;&lt;code&gt;pods/topology-spread-constraints/two-constraints.yaml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mypod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologySpreadConstraints&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zone&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;DoNotSchedule&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labelSelector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;DoNotSchedule&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labelSelector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;pause&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;k8s.gcr.io/pause:3.1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，为了匹配第一个约束，传入的 Pod 只能放置在 &amp;ldquo;zoneB&amp;rdquo; 中；而在第二个约束中，传入的 Pod 只能放置在 &amp;ldquo;node4&amp;rdquo; 上。然后两个约束的结果加在一起，因此唯一可行的选择是放置在 &amp;ldquo;node4&amp;rdquo; 上。&lt;/p&gt;
&lt;p&gt;多个约束可能导致冲突。假设有一个跨越 2 个区域的 3 节点集群：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+---------------+-------+
|     zoneA     | zoneB |
+-------+-------+-------+
| node1 | node2 |  nod3 |
+-------+-------+-------+
|  P P  |   P   |  P P  |
+-------+-------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果对集群应用 &amp;ldquo;two-constraints.yaml&amp;rdquo;，会发现 &amp;ldquo;mypod&amp;rdquo; 处于 &lt;code&gt;Pending&lt;/code&gt; 状态。这是因为：为了满足第一个约束，&amp;ldquo;mypod&amp;rdquo; 只能放在 &amp;ldquo;zoneB&amp;rdquo; 中，而第二个约束要求 &amp;ldquo;mypod&amp;rdquo; 只能放在 &amp;ldquo;node2&amp;rdquo; 上。Pod 调度无法满足两种约束。&lt;/p&gt;
&lt;p&gt;为了避免这种情况，您可以增加 &lt;code&gt;maxSkew&lt;/code&gt; 或修改其中一个约束，让其使用 &lt;code&gt;whenUnsatisfiable: ScheduleAnyway&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;约定&#34;&gt;约定&lt;/h3&gt;
&lt;p&gt;这里有一些值得注意的隐式约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有与传入 Pod 具有相同命名空间的 Pod 才能作为匹配候选者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有 &lt;code&gt;topologySpreadConstraints[*].topologyKey&lt;/code&gt; 的节点将被忽略。这意味着：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位于这些节点上的 Pod 不会影响 &lt;code&gt;maxSkew&lt;/code&gt; 的计算。在上面的例子中，假设 &amp;ldquo;node1&amp;rdquo; 没有标签 &amp;ldquo;zone&amp;rdquo;，那么 2 个 Pod 将被忽略，因此传入的 Pod 将被调度到 &amp;ldquo;zoneA&amp;rdquo; 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;传入的 Pod 没有机会被调度到这类节点上。在上面的例子中，假设一个带有标签 &lt;code&gt;{zone-typo: zoneC}&lt;/code&gt; 的 &amp;ldquo;node5&amp;rdquo; 加入到集群，它将由于没有标签键 &amp;ldquo;zone&amp;rdquo; 而被忽略。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注意，如果传入 Pod 的 &lt;code&gt;topologySpreadConstraints[*].labelSelector&lt;/code&gt; 与自身的标签不匹配，将会发生什么。在上面的例子中，如果移除传入 Pod 的标签，Pod 仍然可以调度到 &amp;ldquo;zoneB&amp;rdquo;，因为约束仍然满足。然而，在调度之后，集群的不平衡程度保持不变。zoneA 仍然有 2 个带有 {foo:bar} 标签的 Pod，zoneB 有 1 个带有 {foo:bar} 标签的 Pod。因此，如果这不是您所期望的，我们建议工作负载的 &lt;code&gt;topologySpreadConstraints[*].labelSelector&lt;/code&gt; 与其自身的标签匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果传入的 Pod 定义了 &lt;code&gt;spec.nodeSelector&lt;/code&gt; 或 &lt;code&gt;spec.affinity.nodeAffinity&lt;/code&gt;，则将忽略不匹配的节点。&lt;/p&gt;
&lt;p&gt;假设您有一个从 zoneA 到 zoneC 的 5 节点集群：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+---------------+---------------+-------+
|     zoneA     |     zoneB     | zoneC |
+-------+-------+-------+-------+-------+
| node1 | node2 | node3 | node4 | node5 |
+-------+-------+-------+-------+-------+
|   P   |   P   |   P   |       |       |
+-------+-------+-------+-------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并且您知道 &amp;ldquo;zoneC&amp;rdquo; 必须被排除在外。在这种情况下，可以按如下方式编写 yaml，以便将 &amp;ldquo;mypod&amp;rdquo; 放置在 &amp;ldquo;zoneB&amp;rdquo; 上，而不是 &amp;ldquo;zoneC&amp;rdquo; 上。同样，&lt;code&gt;spec.nodeSelector&lt;/code&gt; 也要一样处理。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/website/master/content/zh/examples/pods/topology-spread-constraints/one-constraint-with-nodeaffinity.yaml&#34;&gt;&lt;code&gt;pods/topology-spread-constraints/one-constraint-with-nodeaffinity.yaml&lt;/code&gt;&lt;/a&gt; &lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/0901162ab78eb4ff2e9e5dc8b17c3824befc91a6/44ccd/images/copycode.svg&#34; alt=&#34;Copy pods/topology-spread-constraints/one-constraint-with-nodeaffinity.yaml to clipboard&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kind: Pod apiVersion: v1 metadata:  name: mypod  labels:    foo: bar spec:  topologySpreadConstraints:  - maxSkew: 1    topologyKey: zone    whenUnsatisfiable: DoNotSchedule    labelSelector:      matchLabels:        foo: bar  affinity:    nodeAffinity:      requiredDuringSchedulingIgnoredDuringExecution:        nodeSelectorTerms:        - matchExpressions:          - key: zone            operator: NotIn            values:            - zoneC  containers:  - name: pause    image: k8s.gcr.io/pause:3.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/pods/topology-spread-constraints/one-constraint-with-nodeaffinity.yaml&#34;&gt;&lt;code&gt;pods/topology-spread-constraints/one-constraint-with-nodeaffinity.yaml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mypod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologySpreadConstraints&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zone&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;DoNotSchedule&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labelSelector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;affinity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nodeAffinity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nodeSelectorTerms&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchExpressions&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zone&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;operator&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;NotIn&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- zoneC&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;pause&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;k8s.gcr.io/pause:3.1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集群级别的默认约束&#34;&gt;集群级别的默认约束&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt;&lt;code&gt;Kubernetes v1.18 [alpha]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以为集群设置默认拓扑扩展约束。仅在以下情况下，默认拓扑扩展约束将应用于Pod：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 没有在 &lt;code&gt;.spec.topologySpreadConstraints&lt;/code&gt; 中定义任何约束。&lt;/li&gt;
&lt;li&gt;Pod 属于 Service、Replication Controller、ReplicaSet 或 StatefulSet。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在 &lt;a href=&#34;https://kubernetes.io/docs/reference/scheduling/profiles&#34;&gt;调度配置文件&lt;/a&gt; 中将默认约束设置为 &lt;code&gt;PodTopologySpread&lt;/code&gt; 插件 args 的一部分。约束使用与上面相同的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#api&#34;&gt;API&lt;/a&gt; 指定，但 &lt;code&gt;labelSelector&lt;/code&gt; 必须为空。选择器是根据 Pod 所属的 Service、Replication Controller、ReplicaSet 或 StatefulSet 计算得出的。&lt;/p&gt;
&lt;p&gt;配置示例如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kubescheduler.config.k8s.io/v1alpha2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;KubeSchedulerConfiguration&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;profiles&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;pluginConfig&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;PodTopologySpread&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;defaultConstraints&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;failure-domain.beta.kubernetes.io/zone&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ScheduleAnyway&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：默认调度约束产生的分数可能与 &lt;a href=&#34;https://kubernetes.io/docs/reference/scheduling/profiles/#scheduling-plugins&#34;&gt;&lt;code&gt;DefaultPodTopologySpread&lt;/code&gt; 插件&lt;/a&gt; 产生的分数冲突。当为 &lt;code&gt;PodTopologySpread&lt;/code&gt; 使用默认约束时，建议您在调度配置文件中禁用此插件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;与-podaffinitypodantiaffinity-相比较&#34;&gt;与 PodAffinity/PodAntiAffinity 相比较&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，与 &amp;ldquo;Affinity&amp;rdquo; 相关的指令控制 Pod 的调度方式（更密集或更分散）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;PodAffinity&lt;/code&gt;，可以尝试将任意数量的 Pod 打包到符合条件的拓扑域中。&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;PodAntiAffinity&lt;/code&gt;，只能将一个 Pod 调度到单个拓扑域中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;EvenPodsSpread&amp;rdquo; 功能提供了灵活的选项，用来将 Pod 均匀分布到不同的拓扑域中，以实现高可用性或节省成本。这也有助于滚动更新工作负载和平滑扩展副本。有关详细信息，请参考&lt;a href=&#34;https://github.com/kubernetes/enhancements/blob/master/keps/sig-scheduling/20190221-pod-topology-spread.md#motivation&#34;&gt;动机&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;已知局限性&#34;&gt;已知局限性&lt;/h2&gt;
&lt;p&gt;1.18 版本（此功能为 Beta）存在如下已知限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Deployment&lt;/code&gt; 的缩容可能导致 Pod 分布不平衡。&lt;/li&gt;
&lt;li&gt;Pod 匹配到污点节点是允许的。参考 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/80921&#34;&gt;Issue 80921&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 干扰（Disruptions）</title>
      <link>/docs/cloudnative/kubernetes/concepts/workloads/pods/disruptions/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/workloads/pods/disruptions/</guid>
      <description>
        
        
        &lt;p&gt;本指南针对的是希望构建高可用性应用程序的应用所有者，他们有必要了解可能发生在 Pod 上的干扰类型。&lt;/p&gt;
&lt;p&gt;文档同样适用于想要执行自动化集群操作（例如升级和自动扩展集群）的集群管理员。&lt;/p&gt;
&lt;h2 id=&#34;自愿干扰和非自愿干扰&#34;&gt;自愿干扰和非自愿干扰&lt;/h2&gt;
&lt;p&gt;Pod 不会消失，除非有人（用户或控制器）将其销毁，或者出现了不可避免的硬件或软件系统错误。&lt;/p&gt;
&lt;p&gt;我们把这些不可避免的情况称为应用的&lt;em&gt;非自愿干扰&lt;/em&gt;。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点下层物理机的硬件故障&lt;/li&gt;
&lt;li&gt;集群管理员错误地删除虚拟机（实例）&lt;/li&gt;
&lt;li&gt;云提供商或虚拟机管理程序中的故障导致的虚拟机消失&lt;/li&gt;
&lt;li&gt;内核错误&lt;/li&gt;
&lt;li&gt;节点由于集群网络隔离从集群中消失&lt;/li&gt;
&lt;li&gt;由于节点&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/out-of-resource/&#34;&gt;资源不足&lt;/a&gt;导致 Pod 被驱逐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了资源不足的情况，大多数用户应该都熟悉这些情况；它们不是特定于 Kubernetes 的。&lt;/p&gt;
&lt;p&gt;我们称其他情况为&lt;em&gt;自愿干扰&lt;/em&gt;。包括由应用程序所有者发起的操作和由集群管理员发起的操作。典型的应用程序所有者的 作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除 deployment 或其他管理 pod 的控制器&lt;/li&gt;
&lt;li&gt;更新了 deployment 的 pod 模板导致 pod 重启&lt;/li&gt;
&lt;li&gt;直接删除 pod（例如，因为误操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集群管理员操作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/&#34;&gt;排空（drain）节点&lt;/a&gt;进行修复或升级。&lt;/li&gt;
&lt;li&gt;从集群中排空节点以缩小集群（了解&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#cluster-autoscaler&#34;&gt;集群自动扩缩&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;从节点中移除一个 pod，以允许其他 pod 使用该节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些操作可能由集群管理员直接执行，也可能由集群管理员所使用的自动化工具执行，或者由集群托管提供商自动执行。&lt;/p&gt;
&lt;p&gt;咨询集群管理员或联系云提供商，或者查询发布文档，以确定是否为集群启用了任何自愿干扰源。如果没有启用，可以不用创建 Pod Disruption Budgets（Pod 干扰预算）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**警告：**并非所有的自愿干扰都会受到 Pod 干扰预算的限制。例如，删除 deployment 或 pod 的删除操作就会跳过 pod 干扰预算检查。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;处理干扰&#34;&gt;处理干扰&lt;/h2&gt;
&lt;p&gt;以下是减轻非自愿干扰的一些方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保 Pod &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-ram-container&#34;&gt;请求所需资源&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;如果需要更高的可用性，请复制应用程序。（了解有关运行多副本的&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/&#34;&gt;无状态&lt;/a&gt;和&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/&#34;&gt;有状态&lt;/a&gt;应用程序的信息。）&lt;/li&gt;
&lt;li&gt;为了在运行复制应用程序时获得更高的可用性，请跨机架（使用&lt;a href=&#34;https://kubernetes.io/docs/user-guide/node-selection/#inter-pod-affinity-and-anti-affinity-beta-feature&#34;&gt;反亲和性&lt;/a&gt;）或跨区域（如果使用&lt;a href=&#34;https://kubernetes.io/docs/setup/multiple-zones&#34;&gt;多区域集群&lt;/a&gt;）扩展应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自愿干扰的频率各不相同。在一个基本的 Kubernetes 集群中，根本没有自愿干扰。然而，集群管理员或托管提供商可能运行一些可能导致自愿干扰的额外服务。例如，节点软件更新可能导致自愿干扰。另外，集群（节点）自动缩放的某些实现可能导致碎片整理和紧缩节点的自愿干扰。集群管理员或托管提供商应该已经记录了各级别的自愿干扰（如果有的话）。&lt;/p&gt;
&lt;p&gt;Kubernetes 提供特性来满足在出现频繁自愿干扰的同时运行高可用的应用程序。我们称这些特性为&lt;em&gt;干扰预算&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&#34;干扰预算工作原理&#34;&gt;干扰预算工作原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;功能状态：&lt;/strong&gt; &lt;code&gt;Kubernetes v1.5 [beta]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用程序所有者可以为每个应用程序创建 &lt;code&gt;PodDisruptionBudget&lt;/code&gt; 对象（PDB）。PDB 将限制在同一时间因自愿干扰导致的复制应用程序中宕机的 Pod 数量。例如，基于仲裁的应用程序希望确保运行的副本数永远不会低于仲裁所需的数量。Web 前端可能希望确保提供负载的副本数量永远不会低于总数的某个百分比。&lt;/p&gt;
&lt;p&gt;集群管理员和托管提供商应该使用遵循 Pod Disruption Budgets 的工具（通过调用&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/#the-eviction-api&#34;&gt;驱逐 API&lt;/a&gt;），而不是直接删除 Pod 或 Deployment。示例包括 &lt;code&gt;kubectl drain&lt;/code&gt; 命令和 Kubernetes-on-GCE 集群升级脚本（&lt;code&gt;cluster/gce/upgrade.sh&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;当集群管理员想排空一个节点时，可以使用 &lt;code&gt;kubectl drain&lt;/code&gt; 命令。该命令试图驱逐机器上的所有 Pod。驱逐请求可能会暂时被拒绝，且该工具定时重试失败的请求直到所有的 Pod 都被终止，或者达到配置的超时时间。&lt;/p&gt;
&lt;p&gt;PDB 指定应用程序可以容忍的副本数量（相当于应该有多少副本）。例如，具有 &lt;code&gt;.spec.replicas: 5&lt;/code&gt; 的 Deployment 在任何时间都应该有 5 个 pod。如果 PDB 允许其在某一时刻有 4 个副本，那么驱逐 API 将允许同一时刻仅有一个而不是两个 Pod 自愿干扰。&lt;/p&gt;
&lt;p&gt;使用标签选择器来指定构成应用程序的一组 Pod，这与应用程序的控制器（deployment，stateful-set 等）选择 Pod 的逻辑一样。&lt;/p&gt;
&lt;p&gt;Pod 控制器的 &lt;code&gt;.spec.replicas&lt;/code&gt; 计算“预期的” Pod 数量。根据 Pod 对象的 &lt;code&gt;.metadata.ownerReferences&lt;/code&gt; 字段来发现控制器。&lt;/p&gt;
&lt;p&gt;PDB 不能阻止&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/workloads/pods/disruptions/#voluntary-and-involuntary-disruptions&#34;&gt;非自愿干扰&lt;/a&gt;的发生，但是确实会计入预算。&lt;/p&gt;
&lt;p&gt;由于应用程序的滚动升级而被删除或不可用的 Pod 确实会计入干扰预算，但是控制器（如 deployment 和 stateful-set）在进行滚动升级时不受 PDB 的限制。应用程序更新期间的故障处理是在控制器的 spec 中配置的。（了解&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment&#34;&gt;更新 deployment&lt;/a&gt;。）&lt;/p&gt;
&lt;p&gt;当使用驱逐 API 驱逐 Pod 时，Pod 会被优雅地终止（参考 &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podspec-v1-core&#34;&gt;PodSpec&lt;/a&gt; 中的 &lt;code&gt;terminationGracePeriodSeconds&lt;/code&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;pdb-例子&#34;&gt;PDB 例子&lt;/h2&gt;
&lt;p&gt;假设集群有 3 个节点，&lt;code&gt;node-1&lt;/code&gt; 到 &lt;code&gt;node-3&lt;/code&gt;。集群上运行了一些应用。其中一个应用有 3 个副本，分别是 &lt;code&gt;pod-a&lt;/code&gt;，&lt;code&gt;pod-b&lt;/code&gt; 和 &lt;code&gt;pod-c&lt;/code&gt;。另外，还有一个不带 PDB 的无关 pod &lt;code&gt;pod-x&lt;/code&gt; 也同样显示。最初，所有的 pod 分布如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node-1&lt;/th&gt;
&lt;th&gt;node-2&lt;/th&gt;
&lt;th&gt;node-3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pod-a &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-b &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-c &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pod-x &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;3 个 pod 都是 deployment 的一部分，并且共同拥有同一个 PDB，要求 3 个 pod 中至少有 2 个 pod 始终处于可用状态。&lt;/p&gt;
&lt;p&gt;例如，假设集群管理员想要重启系统，升级内核版本来修复内核中的 bug。集群管理员首先使用 &lt;code&gt;kubectl drain&lt;/code&gt; 命令尝试排空 &lt;code&gt;node-1&lt;/code&gt; 节点。命令尝试驱逐 &lt;code&gt;pod-a&lt;/code&gt; 和 &lt;code&gt;pod-x&lt;/code&gt;。操作立即就成功了。两个 pod 同时进入 &lt;code&gt;terminating&lt;/code&gt; 状态。这时的集群处于下面的状态：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node-1 &lt;em&gt;draining&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;node-2&lt;/th&gt;
&lt;th&gt;node-3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pod-a &lt;em&gt;terminating&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-b &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-c &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pod-x &lt;em&gt;terminating&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Deployment 控制器观察到其中一个 pod 正在终止，因此它创建了一个替代 pod &lt;code&gt;pod-d&lt;/code&gt;。由于 &lt;code&gt;node-1&lt;/code&gt; 被封锁（cordon），&lt;code&gt;pod-d&lt;/code&gt; 落在另一个节点上。同样其他控制器也创建了 &lt;code&gt;pod-y&lt;/code&gt; 作为 &lt;code&gt;pod-x&lt;/code&gt; 的替代品。&lt;/p&gt;
&lt;p&gt;（注意：对于 StatefulSet 来说，&lt;code&gt;pod-a&lt;/code&gt;（也称为 &lt;code&gt;pod-0&lt;/code&gt;）需要在替换 pod 创建之前完全终止，替代它的也称为 &lt;code&gt;pod-0&lt;/code&gt;，但是具有不同的 UID。反之，样例也适用于 StatefulSet。）&lt;/p&gt;
&lt;p&gt;当前集群的状态如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node-1 &lt;em&gt;draining&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;node-2&lt;/th&gt;
&lt;th&gt;node-3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pod-a &lt;em&gt;terminating&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-b &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-c &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pod-x &lt;em&gt;terminating&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-d &lt;em&gt;starting&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在某一时刻，pod 被终止，集群如下所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node-1 &lt;em&gt;drained&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;node-2&lt;/th&gt;
&lt;th&gt;node-3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pod-b &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-c &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pod-d &lt;em&gt;starting&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此时，如果一个急躁的集群管理员试图排空（drain）&lt;code&gt;node-2&lt;/code&gt; 或 &lt;code&gt;node-3&lt;/code&gt;，drain 命令将被阻塞，因为对于 deployment 来说只有 2 个可用的 pod，并且它的 PDB 至少需要 2 个。经过一段时间，&lt;code&gt;pod-d&lt;/code&gt; 变得可用。&lt;/p&gt;
&lt;p&gt;集群状态如下所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node-1 &lt;em&gt;drained&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;node-2&lt;/th&gt;
&lt;th&gt;node-3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pod-b &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-c &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pod-d &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在，集群管理员试图排空（drain）&lt;code&gt;node-2&lt;/code&gt;。drain 命令将尝试按照某种顺序驱逐两个 pod，假设先是 &lt;code&gt;pod-b&lt;/code&gt;，然后是 &lt;code&gt;pod-d&lt;/code&gt;。命令成功驱逐 &lt;code&gt;pod-b&lt;/code&gt;，但是当它尝试驱逐 &lt;code&gt;pod-d&lt;/code&gt; 时将被拒绝，因为对于 deployment 来说只剩一个可用的 pod 了。&lt;/p&gt;
&lt;p&gt;Deployment 创建 &lt;code&gt;pod-b&lt;/code&gt; 的替代 pod &lt;code&gt;pod-e&lt;/code&gt;。因为集群中没有足够的资源来调度 &lt;code&gt;pod-e&lt;/code&gt;，drain 命令再次阻塞。集群最终将是下面这种状态：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node-1 &lt;em&gt;drained&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;node-2&lt;/th&gt;
&lt;th&gt;node-3&lt;/th&gt;
&lt;th&gt;&lt;em&gt;no node&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pod-b &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-c &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-e &lt;em&gt;pending&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pod-d &lt;em&gt;available&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;pod-y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此时，集群管理员需要增加一个节点到集群中以继续升级操作。&lt;/p&gt;
&lt;p&gt;可以看到 Kubernetes 如何改变干扰发生的速率，根据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序需要多少个副本&lt;/li&gt;
&lt;li&gt;优雅关闭应用实例需要多长时间&lt;/li&gt;
&lt;li&gt;启动应用新实例需要多长时间&lt;/li&gt;
&lt;li&gt;控制器的类型&lt;/li&gt;
&lt;li&gt;集群的资源容量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分离集群所有者和应用所有者角色&#34;&gt;分离集群所有者和应用所有者角色&lt;/h2&gt;
&lt;p&gt;通常，将集群管理者和应用所有者视为彼此了解有限的独立角色是很有用的。这种责任分离在下面这些场景下是有意义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当有许多应用程序团队共用一个 Kubernetes 集群，并且有自然的专业角色&lt;/li&gt;
&lt;li&gt;当第三方工具或服务用于集群自动化管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pod 干扰预算通过在角色之间提供接口来支持这种分离。&lt;/p&gt;
&lt;p&gt;如果你的组织中没有这样的责任分离，则可能不需要使用 Pod 干扰预算。&lt;/p&gt;
&lt;h2 id=&#34;如何在集群上执行干扰操作&#34;&gt;如何在集群上执行干扰操作&lt;/h2&gt;
&lt;p&gt;如果你是集群管理员，并且需要对集群中的所有节点执行干扰操作，例如节点或系统软件升级，则可以使用以下选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受升级期间的停机时间。&lt;/li&gt;
&lt;li&gt;故障转移到另一个完整的副本集群。
&lt;ul&gt;
&lt;li&gt;没有停机时间，但是对于重复的节点和人工协调成本可能是昂贵的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编写可容忍干扰的应用程序和使用 PDB。
&lt;ul&gt;
&lt;li&gt;不停机。&lt;/li&gt;
&lt;li&gt;最小的资源重复。&lt;/li&gt;
&lt;li&gt;允许更多的集群管理自动化。&lt;/li&gt;
&lt;li&gt;编写可容忍干扰的应用程序是棘手的，但对于支持容忍自愿干扰所做的工作，和支持自动扩缩和容忍非自愿干扰所做的工作相比，有大量的重叠。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Go</title>
      <link>/docs/develop/go/</link>
      <pubDate>Mon, 13 Jun 2022 17:13:19 +0800</pubDate>
      
      <guid>/docs/develop/go/</guid>
      <description>
        
        
        &lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;p&gt;step1. 安装 Go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go: stable 1.18 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;bottled&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;, HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Open &lt;span style=&#34;color:#a2f&#34;&gt;source&lt;/span&gt; programming language to build simple/reliable/efficient software
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;https://go.dev/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version go1.18 darwin/amd64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step2. 设置 Go env&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# GOPATH, GOROOT, GOBIN, GO111MODULE, GOPROXY, GOPRIVATE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go env -w &lt;span style=&#34;color:#b8860b&#34;&gt;GO111MODULE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;on
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go env -w &lt;span style=&#34;color:#b8860b&#34;&gt;GOPROXY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://goproxy.cn,direct
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step3. 安装 VSCode 及 vscode-go 插件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Go: Install/Update Tools
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.Go&#34;&gt;https://marketplace.visualstudio.com/items?itemName=golang.Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;step4. 开始 Go 开发之旅&lt;/p&gt;
&lt;h3 id=&#34;go-命令行&#34;&gt;Go 命令行&lt;/h3&gt;
&lt;p&gt;go mod&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go mod tidy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;升级依赖&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go get -u github.com/spf13/cobra
go get -u github.com/spf13/pflag
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go get
go install
go mod
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;项目开发&#34;&gt;项目开发&lt;/h2&gt;
&lt;h3 id=&#34;命令行工具&#34;&gt;命令行工具&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gh repo clone luohu1/cmdcli-go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;交叉编译&#34;&gt;交叉编译&lt;/h2&gt;
&lt;p&gt;Mac 下编译 Linux 和 Windows 64 位可执行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;linux &lt;span style=&#34;color:#b8860b&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;amd64 go build -o gitlab cmd/gitlab/main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;windows &lt;span style=&#34;color:#b8860b&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;amd64 go build -o appname.exe appname.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linux 下编译 Mac 和 Windows 64 位可执行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;linux &lt;span style=&#34;color:#b8860b&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;amd64 go build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;windows &lt;span style=&#34;color:#b8860b&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;amd64 go build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;ghp_lRMj********************************&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/go/bin/goreleaser release --rm-dist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/go/bin/goreleaser release --snapshot --rm-dist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;crontab&#34;&gt;Crontab&lt;/h2&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/robfig/cron/&#34;&gt;https://github.com/robfig/cron/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/robfig/cron/v3&#34;&gt;https://pkg.go.dev/github.com/robfig/cron/v3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang-standards/project-layout&#34;&gt;https://github.com/golang-standards/project-layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6855129007038726152#heading-0&#34;&gt;https://juejin.cn/post/6855129007038726152#heading-0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.kancloud.cn/lhj0702/sockstack_gin/1805357&#34;&gt;https://static.kancloud.cn/lhj0702/sockstack_gin/1805357&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goreleaser.com/quick-start/&#34;&gt;https://goreleaser.com/quick-start/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goreleaser.com/&#34;&gt;https://goreleaser.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Log Pilot</title>
      <link>/docs/logging/log-pilot/</link>
      <pubDate>Mon, 13 Jun 2022 17:08:53 +0800</pubDate>
      
      <guid>/docs/logging/log-pilot/</guid>
      <description>
        
        
        &lt;p&gt;elastalert&lt;/p&gt;
&lt;p&gt;dingtalk 插件开发&lt;/p&gt;
&lt;p&gt;Python 3.8.10&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gh repo clone luohu1/elastalert-dingtalk-plugin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code elastalert-dingtalk-plugin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; elastalert-dingtalk-plugin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv --copies venv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;source&lt;/span&gt; venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install --upgrade pip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;setuptools&amp;gt;=11.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;elasticsearch&amp;gt;=5.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;elastalert==0.2.4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip freeze &amp;gt; requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir elastalert_modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; elastalert_modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch __init__.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch my_alerts.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# k8s 启动 elasticsearch&amp;amp;kibana&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl port-forward svc/elasticsearch 9200:9200
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl port-forward svc/kibana 15601:5601
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ elastalert-create-index
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Elastic Version: 7.7.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reading Elastic &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; index mappings:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reading index mapping &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;es_mappings/6/silence.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reading index mapping &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;es_mappings/6/elastalert_status.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reading index mapping &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;es_mappings/6/elastalert.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reading index mapping &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;es_mappings/6/past_elastalert.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reading index mapping &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;es_mappings/6/elastalert_error.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New index elastalert_status created
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Done!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ elastalert-test-rule --config &amp;lt;path-to-config-file&amp;gt; example_rules/example_frequency.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python -m elastalert.elastalert --verbose
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; rules loaded
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO:elastalert:Starting up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO:elastalert:Disabled rules are: &lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO:elastalert:Sleeping &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; 59.999748 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 开发 DingtalkAlerter 代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -it -d --name es alpine:3.14
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl &lt;span style=&#34;color:#a2f&#34;&gt;exec&lt;/span&gt; -it -n monitoring elastalert-68cdf7fdc7-tjbvm -- sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;alpine 1.14 内置 python 3.9 elastalert 不兼容&lt;/p&gt;
&lt;p&gt;查询索引列表&lt;/p&gt;
&lt;h2 id=&#34;示例文件&#34;&gt;示例文件&lt;/h2&gt;
&lt;p&gt;使用 configmap&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create configmap elastalert-config --from-file=config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;elasticsearch deploy.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl port-forward svc/elasticsearch 9200:9200
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl port-forward svc/kibana 15601:5601
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;replicas&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch:7.7.1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9200&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;env&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;discovery.type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;single-node&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;bootstrap.memory_lock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ClusterIP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9200&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;protocol&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9200&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;elasticsearch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;replicas&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;strategy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Recreate&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;automountServiceAccountToken&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;securityContext&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fsGroup&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;securityContext&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;capabilities&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;drop&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;                &lt;/span&gt;- ALL&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;runAsNonRoot&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;runAsUser&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;kibana:7.7.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;IfNotPresent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;env&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ELASTICSEARCH_HOSTS&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;http://elasticsearch:9200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;SERVER_HOST&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;NODE_OPTIONS&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;--max-old-space-size=1800&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5601&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;limits&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;cpu&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1000m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;memory&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2Gi&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;requests&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;cpu&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1000m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;memory&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2Gi&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ClusterIP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5601&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;protocol&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5601&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kibana&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Yelp/elastalert.git&#34;&gt;https://github.com/Yelp/elastalert.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elastalert.readthedocs.io/en/latest/&#34;&gt;https://elastalert.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xuyaoqiang/elastalert-dingtalk-plugin.git&#34;&gt;https://github.com/xuyaoqiang/elastalert-dingtalk-plugin.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/386722918&#34;&gt;https://zhuanlan.zhihu.com/p/386722918&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open.dingtalk.com/document/robots/custom-robot-access&#34;&gt;https://open.dingtalk.com/document/robots/custom-robot-access&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Quick Start</title>
      <link>/docs/developer-tools/hugo/quick-start/</link>
      <pubDate>Mon, 13 Jun 2022 16:50:51 +0800</pubDate>
      
      <guid>/docs/developer-tools/hugo/quick-start/</guid>
      <description>
        
        
        &lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;开发环境&#34;&gt;开发环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo v0.99.1+extended&lt;/li&gt;
&lt;li&gt;Node.js v14.19.1 with npm 6.14.16&lt;/li&gt;
&lt;li&gt;themes/docsy dependencies/v0.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-hugo&#34;&gt;安装 Hugo&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hugo version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo v0.99.1+extended darwin/amd64 &lt;span style=&#34;color:#b8860b&#34;&gt;BuildDate&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;unknown
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;开始写作&#34;&gt;开始写作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/luohu1/website.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; website
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git submodule update --init --recursive
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hugo new docs/developer-tools/hugo/_index.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;visit &lt;a href=&#34;http://127.0.0.1:1313&#34;&gt;http://127.0.0.1:1313&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Controllers</title>
      <link>/docs/cloudnative/kubernetes/concepts/cluster-architecture/controllers/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/cluster-architecture/controllers/</guid>
      <description>
        
        
        &lt;p&gt;在机器人技术和自动化领域, 控制回路是一个非终止回路，用于调节系统状态。&lt;/p&gt;
&lt;p&gt;控制回路的一个示例：房间中的恒温器&lt;/p&gt;
&lt;p&gt;当你设定温度时，即告诉恒温器你期望的状态 desired status。实际的室温是当前状态 current status。恒温器通过打开或关闭设备, 使当前状态更接近期望状态。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 中，控制器是控制循环，它们监视集群的状态，然后在需要的时候进行更改或请求更改。每个控制器都尝试将当前集群状态移动到更接近期望状态。&lt;/p&gt;
&lt;h2 id=&#34;controller-pattern&#34;&gt;Controller pattern&lt;/h2&gt;
&lt;p&gt;一个控制器至少跟踪一种 Kubernetes 资源类型。这些对象有一个特定的字段代表着期望的状态。该资源的控制器负责使当前状态更接近于期望状态。&lt;/p&gt;
&lt;h3 id=&#34;control-via-api-server&#34;&gt;Control via API server&lt;/h3&gt;
&lt;p&gt;Job 控制器是 Kubernetes 内置控制器的一个示例。内置控制器通过与集群 API 服务器进行交互来管理状态。&lt;/p&gt;
&lt;h3 id=&#34;direct-control&#34;&gt;Direct control&lt;/h3&gt;
&lt;p&gt;于 Job 相比，某些控制器需要对集群外部的内容进行更改。&lt;/p&gt;
&lt;p&gt;与外部状态进行交互的控制器从 API 服务器中找到期望的状态，然后直接与外部系统进行通信以使当前状态更加紧密。&lt;/p&gt;
&lt;h2 id=&#34;desired-versus-current-status&#34;&gt;Desired versus current status&lt;/h2&gt;
&lt;h3 id=&#34;design&#34;&gt;Design&lt;/h3&gt;
&lt;p&gt;作为其设计宗旨，Kubernetes 使用许多控制器，每个控制器管理集群状态的特定方面。最常见的是，一个特定的控制循环（controller）使用一种资源作为其期望状态，并有另一种不同的资源来设法使该期望状态发生。例如，Jobs 的控制器跟踪 Job 对象（以发现新工作）和 Pod 对象（以运行 Jobs，然后查看工作何时完成）。在这种情况下，其他东西创建 Jobs，而 job 控制器将创建 Pods。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: 可以有多个控制器创建或更新相同类型的对象。在幕后，Kubernetes 控制器确保了他们仅关注与控制资源有关联的资源。例如，你可以有 Deployments 和 Jobs，他们都创建 Pods。Job 控制器不会删除 Deployment 创建的 Pods，因为控制器可以使用某些信息（标签）来区分这些 Pod。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ways-of-running-controllers&#34;&gt;Ways of running controllers&lt;/h3&gt;
&lt;p&gt;Kubernetes 带有一组在 kube-controller-manager 内部运行的内置控制器。这些内置控制器提供了重要的核心行为。&lt;/p&gt;
&lt;p&gt;Kubernetes 允许你运行弹性的控制平面，这样，如果任何内置控制器发生故障，控制平面的另一部分将接管工作。&lt;/p&gt;
&lt;p&gt;你可以找到在控制平面以外运行的控制器来扩展 Kubernetes。或者，如果需要，你可以编写一个新的控制器。你可以将自己的控制器作为一组 Pod 运行，也可以在 Kubernetes 外部运行。最合适的选择取决于特定控制器的功能。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes Components</title>
      <link>/docs/cloudnative/kubernetes/concepts/overview/kubenetes-components/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/overview/kubenetes-components/</guid>
      <description>
        
        
        &lt;p&gt;当你部署完 Kubernetes, 你就有了一个集群&lt;/p&gt;
&lt;p&gt;Kubernetes 集群由一组工作机器组成, 这些工作机器称为节点 nodes, 运行容器化应用程序. 每个集群至少有一个工作节点.&lt;/p&gt;
&lt;p&gt;工作节点托管 Pods. 控制平面管理集群中的工作节点和 Pods.&lt;/p&gt;
&lt;p&gt;Kubernetes 集群示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/7016517375d10c702489167e704dcb99e570df85/7bb53/images/docs/components-of-kubernetes.png&#34; alt=&#34;components-of-kubernetes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;控制平面组件control-plane-components&#34;&gt;控制平面组件(Control Plane Components)&lt;/h2&gt;
&lt;p&gt;控制平面组件可以运行在集群中的任何机器上. 然而, 为了简单, 设置脚本通常在同一台计算机上启动所有控制平面组件, 并且不在该计算机上运行用户容器.&lt;/p&gt;
&lt;h3 id=&#34;kube-apiserver&#34;&gt;kube-apiserver&lt;/h3&gt;
&lt;p&gt;暴露 Kubernetes API&lt;/p&gt;
&lt;h3 id=&#34;etcd&#34;&gt;etcd&lt;/h3&gt;
&lt;p&gt;所有集群数据的后端存储&lt;/p&gt;
&lt;h3 id=&#34;kube-scheduler&#34;&gt;kube-scheduler&lt;/h3&gt;
&lt;p&gt;监视新创建的还没有分配节点的Pod, 并选择一个节点使其运行&lt;/p&gt;
&lt;p&gt;调度决策要考虑的因素包括: 个人和集体资源需求, 硬件/软件/策略约束, 亲和力和反亲和力规范, 数据局限性, 工作负载之间的干扰以及期限.&lt;/p&gt;
&lt;h3 id=&#34;kube-controller-manager&#34;&gt;kube-controller-manager&lt;/h3&gt;
&lt;p&gt;运行控制器进程的控制平面组件&lt;/p&gt;
&lt;p&gt;从逻辑上讲, 每个控制器是一个单独的进程, 但是为了降低复杂性, 它们都被编译为单个二进制文件并在单个进程中运行.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node 控制器: 负责节点发生故障时的通知和响应&lt;/li&gt;
&lt;li&gt;Replication 控制器: 负责为系统中的每个 replication 控制器对象维护正确数量的 Pods&lt;/li&gt;
&lt;li&gt;Endpoints 控制器: 填充 Endpoints 对象(加入 Services &amp;amp; Pods)&lt;/li&gt;
&lt;li&gt;Service Account &amp;amp; Token 控制器: 为新的名称空间创建默认账户和API访问令牌&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloud-controller-manager&#34;&gt;cloud-controller-manager&lt;/h3&gt;
&lt;h2 id=&#34;node-components&#34;&gt;Node Components&lt;/h2&gt;
&lt;h3 id=&#34;kubelet&#34;&gt;kubelet&lt;/h3&gt;
&lt;p&gt;kubelet 获取一组 PodSpecs, 并确保这些 PodSpecs 中描述的容器是运行中和健康的&lt;/p&gt;
&lt;h3 id=&#34;kube-proxy&#34;&gt;kube-proxy&lt;/h3&gt;
&lt;p&gt;kube-proxy 维护节点上的网络规则. 这些网络规则允许从集群内部或外部的网络会话于 Pod 进行网络通信&lt;/p&gt;
&lt;p&gt;如果有一个操作系统数据包过滤层可用, kube-proxy 使用操作系统数据包过滤层, 否则, kube-proxy 自己转发流量.&lt;/p&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;Container runtime&lt;/h3&gt;
&lt;p&gt;Docker, containerd, CRI-O, 和 Kubernetes CRI 的任何实现&lt;/p&gt;
&lt;h2 id=&#34;插件addons&#34;&gt;插件(Addons)&lt;/h2&gt;
&lt;p&gt;插件使用 Kubernetes 资源实现集群功能. 因为它们提供集群级别的功能, 所以插件的命名空间资源属于&lt;code&gt;kube-system&lt;/code&gt; 命名空间&lt;/p&gt;
&lt;p&gt;可用插件的扩展列表, 请参见&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/addons/&#34;&gt;插件(Addons)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns&#34;&gt;DNS&lt;/h3&gt;
&lt;p&gt;为 Kubernetes 服务提供 DNS 记录&lt;/p&gt;
&lt;h3 id=&#34;web-ui-dashboard&#34;&gt;Web UI (Dashboard)&lt;/h3&gt;
&lt;p&gt;Dashboard 是 Kubernetes 集群的通用基于 Web 的 UI. 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除.&lt;/p&gt;
&lt;h3 id=&#34;containner-resource-monitoring&#34;&gt;Containner Resource Monitoring&lt;/h3&gt;
&lt;p&gt;容器资源监控将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中, 并提供用于浏览这些数据的界面&lt;/p&gt;
&lt;h3 id=&#34;cluster-level-logging&#34;&gt;Cluster-level Logging&lt;/h3&gt;
&lt;p&gt;集群层面日志机制负责将容器的日志数据保存到一个集中的日志存储中, 该存储能够提供搜索和浏览接口.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: What is Kubernetes?</title>
      <link>/docs/cloudnative/kubernetes/concepts/overview/what-is-kubernetes/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/overview/what-is-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 名字起源于希腊语, 意思是舵手或飞行员&lt;/p&gt;
&lt;h2 id=&#34;历史回顾&#34;&gt;历史回顾&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/26a177ede4d7b032362289c6fccd448fc4a91174/eb693/images/docs/container_evolution.svg&#34; alt=&#34;container_evolution&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;传统部署时代&#34;&gt;传统部署时代&lt;/h3&gt;
&lt;h3 id=&#34;虚拟化部署时代&#34;&gt;虚拟化部署时代&lt;/h3&gt;
&lt;h3 id=&#34;容器部署时代&#34;&gt;容器部署时代&lt;/h3&gt;
&lt;p&gt;容器带来的好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快的应用创建和部署: 使用容器镜像相比使用 VM 镜像更加简单和高效.&lt;/li&gt;
&lt;li&gt;持续开发, 集成和部署:&lt;/li&gt;
&lt;li&gt;开发和运维的关注点分离:&lt;/li&gt;
&lt;li&gt;可观察性不仅可以显示操作系统级别的信息和指标, 还可以显示应用的健康和其他信号.&lt;/li&gt;
&lt;li&gt;环境一致性:&lt;/li&gt;
&lt;li&gt;云和操作系统分发的可移植性&lt;/li&gt;
&lt;li&gt;以应用程序为中心的管理:&lt;/li&gt;
&lt;li&gt;松散耦合, 分布式, 弹性, 解放的微服务&lt;/li&gt;
&lt;li&gt;资源隔离&lt;/li&gt;
&lt;li&gt;资源利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么需要-kubernetes-和-kubernetes-可以做什么&#34;&gt;为什么需要 Kubernetes 和 Kubernetes 可以做什么&lt;/h2&gt;
&lt;p&gt;Kubernetes 提供的能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务发现和负载均衡&lt;/li&gt;
&lt;li&gt;存储编排&lt;/li&gt;
&lt;li&gt;自动部署和回滚&lt;/li&gt;
&lt;li&gt;自动 bin packing&lt;/li&gt;
&lt;li&gt;自我修复&lt;/li&gt;
&lt;li&gt;Secret 和配置管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-kubernetes-is-not&#34;&gt;What Kubernetes is not&lt;/h2&gt;
&lt;p&gt;Kubernetes 不是一个传统的, 包罗万象的PaaS系统. 由于 Kubernetes 运行在容器层面而不是硬件层面, 因此它提供了 PaaS 产品所共有的一些普遍适用的功能, 例如部署, 扩展, 负载均衡, 并允许用户集成他们的日志记录, 监控和报警解决方案.&lt;/p&gt;
&lt;p&gt;Kubernetes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不限制应用程序的类型: 无状态, 有状态和数据处理.&lt;/li&gt;
&lt;li&gt;不部署源代码, 也不构建应用程序&lt;/li&gt;
&lt;li&gt;不提供应用级别的服务作为内置服务, 例如中间件, 数据处理框架, 数据库, 缓存, 集群存储系统&lt;/li&gt;
&lt;li&gt;不指示日志记录, 监控和报警解决方案&lt;/li&gt;
&lt;li&gt;不提供也不要求配置语言/系统&lt;/li&gt;
&lt;li&gt;不提供也不采用任何全面的机器配置, 维护, 管理或自我修复系统&lt;/li&gt;
&lt;li&gt;Kubernetes 不仅仅是一个编排系统.  事实上, 它消除了编排的需要. 编排的技术定义是执行定义好的工作流程: 先做 A, 然后 B, 然后 C. 相反, Kubernetes 包含一组独立的, 可组合的控制进程, 这些控制过程连续地讲当前状态驱动到提供的期望状态. 它跟你如何从 A 到 C 的方式没有关系. 也不需要集中控制.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Installing Jenkins</title>
      <link>/docs/cicd/jenkins/user-handbook/installing-jenkins/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/cicd/jenkins/user-handbook/installing-jenkins/</guid>
      <description>
        
        
        &lt;h1 id=&#34;安装-jenkins&#34;&gt;安装 Jenkins&lt;/h1&gt;
&lt;p&gt;本节的步骤适用于在单台/本地计算机上的 Jenkins 新安装。&lt;/p&gt;
&lt;p&gt;Jenkins 通常使用内置的 &lt;a href=&#34;https://stackoverflow.com/questions/7213541/what-is-java-servlet&#34;&gt;Java Servlet&lt;/a&gt; 容器/应用服务器（&lt;a href=&#34;https://www.eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt;）在其自己的进程中作为独立应用程序运行。&lt;/p&gt;
&lt;p&gt;Jenkins 也可以在其他 Java servlet 容器（例如 &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Apache Tomcat&lt;/a&gt; 或 &lt;a href=&#34;https://javaee.github.io/glassfish/&#34;&gt;GlassFish&lt;/a&gt;）中作为 servlet 运行。但是，设置这些类型的安装的说明超出了本页的范围。&lt;/p&gt;
&lt;p&gt;**注意：**尽管此页面侧重于 Jenkins 的本地安装，但此内容也可用于帮助在生产环境中设置 Jenkins。&lt;/p&gt;
&lt;h2 id=&#34;系统要求&#34;&gt;系统要求&lt;/h2&gt;
&lt;p&gt;最低硬件要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;256 MB 可用内存&lt;/li&gt;
&lt;li&gt;1 GB 可用磁盘空间（如果将 Jenkins 作为 Docker 容器运行，建议最小为 10 GB）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为小团队推荐的硬件配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 GB + 可用内存&lt;/li&gt;
&lt;li&gt;50 GB+ 可用磁盘空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全面的硬件建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件：请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/hardware-recommendations/#hardware-recommendations&#34;&gt;硬件建议 &lt;/a&gt;页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java：请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/administration/requirements/java&#34;&gt;Java 要求&lt;/a&gt; 页面&lt;/li&gt;
&lt;li&gt;Web 浏览器：请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/administration/requirements/web-browsers&#34;&gt;Web 浏览器兼容性&lt;/a&gt; 页面&lt;/li&gt;
&lt;li&gt;对于 Windows 操作系统：&lt;a href=&#34;https://www.jenkins.io/doc/administration/requirements/windows&#34;&gt;Windows 支持策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装平台&#34;&gt;安装平台&lt;/h2&gt;
&lt;p&gt;本节介绍如何在不同的平台和操作系统上安装/运行 Jenkins。&lt;/p&gt;
&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/docker-overview/&#34;&gt;Docker&lt;/a&gt; 是一个用于在称为“容器”（或 Docker 容器）的隔离环境中运行应用程序的平台。诸如 Jenkins 之类的应用程序可以作为只读“镜像”（或 Docker 镜像）下载，每个映像都作为容器在 Docker 中运行。Docker 容器实际上是 Docker 镜像的“运行实例”。从这个角度来看，镜像或多或少地被永久地存储（即：只要镜像更新发布），而容器被临时存储。在 Docker 文档的入门指南，&lt;a href=&#34;https://docs.docker.com/get-started/&#34;&gt;Getting Started, Part 1: Orientation and setup&lt;/a&gt; 页面中阅读有关这些概念的更多信息。&lt;/p&gt;
&lt;p&gt;Docker 的基本平台和容器设计意味着可以在任何受支持的操作系统（macOS、Linux 和 Windows）或也运行着 Docker 的云服务（AWS 和 Azure）上运行单个 Docker 映像（对于任何给定的应用程序，如 Jenkins）。&lt;/p&gt;
&lt;h4 id=&#34;安装-docker&#34;&gt;安装 Docker&lt;/h4&gt;
&lt;p&gt;要将 Docker 安装在您的操作系统上，请访问 &lt;a href=&#34;https://store.docker.com/search?type=edition&amp;amp;offering=community&#34;&gt;Docker store&lt;/a&gt; 网站，然后单击适用于您的操作系统或云服务的 &lt;strong&gt;Docker Community Edition&lt;/strong&gt; 框。按照其网站上的安装说明进行操作。&lt;/p&gt;
&lt;p&gt;Jenkins 也可以在 Docker 企业版上运行，您可以通过 Docker 商店网站上的 &lt;strong&gt;Docker EE&lt;/strong&gt; 进行访问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要在基于 Linux 的操作系统上安装 Docker，请确保配置 Docker，以便可以以非 root 用户身份对其进行管理。请在 Docker 文档的 Docker 的 &lt;a href=&#34;https://docs.docker.com/engine/installation/linux/linux-postinstall/&#34;&gt;Linux 安装后步骤&lt;/a&gt; 页面中阅读有关此内容的更多信息。该页面还包含有关如何配置 Docker 开机启动的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;在-docker-中下载并运行-jenkins&#34;&gt;在 Docker 中下载并运行 Jenkins&lt;/h4&gt;
&lt;p&gt;Jenkins 有多个可用的 Docker 镜像。&lt;/p&gt;
&lt;p&gt;推荐使用的 Docker 镜像是 &lt;a href=&#34;https://hub.docker.com/r/jenkinsci/blueocean/&#34;&gt;&lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 镜像&lt;/a&gt;（来自 &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub 存储库&lt;/a&gt;）。该镜像包含了与所有 Blue Ocean 插件和功能捆绑在一起的 Jenkins 的当前长期支持（LTS）版本（可以投入生产使用）。这意味着您不需要单独安装 Blue Ocean 插件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每次发布新版 Blue Ocean 时，都会发布新的 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 镜像。您可以在 &lt;a href=&#34;https://hub.docker.com/r/jenkinsci/blueocean/tags/&#34;&gt;tags&lt;/a&gt; 页面上看到 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 镜像以前发布的版本列表。&lt;/p&gt;
&lt;p&gt;您还可以使用其他 Jenkins Docker 映像（在 Docker Hub 上可通过 &lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins/&#34;&gt;&lt;code&gt;jenkins/jenkins&lt;/code&gt;&lt;/a&gt; 访问）。但是，这些不会随 Blue Ocean的发布而提供，需要通过 Jenkins 中的 &lt;a href=&#34;https://www.jenkins.io/zh/doc/book/managing&#34;&gt;&lt;strong&gt;Manage Jenkins&lt;/strong&gt;&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://www.jenkins.io/zh/doc/book/managing/plugins&#34;&gt;&lt;strong&gt;Manage Plugins&lt;/strong&gt;&lt;/a&gt; 页面进行安装。 在 &lt;a href=&#34;https://www.jenkins.io/zh/doc/book/blueocean/getting-started&#34;&gt;Blue Ocean 入门&lt;/a&gt; 中了解更多信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;在-macos-和-linux-上&#34;&gt;在 macOS 和 Linux 上&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开一个终端窗口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下 &lt;code&gt;docker network create&lt;/code&gt; 命令在 Docker 中创建 &lt;a href=&#34;https://docs.docker.com/network/bridge/&#34;&gt;桥接网络&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker network create jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下 &lt;code&gt;docker volume create&lt;/code&gt; 命令创建以下存储卷，这些存储卷用来共享连接到 Docker 守护程序所需的 Docker 客户端 TLS 证书，和持久化 Jenkins 数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker volume create jenkins-docker-certs
docker volume create jenkins-data
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了在 Jenkins 节点内执行 Docker 命令，请使用以下 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_run/&#34;&gt;&lt;code&gt;docker container run&lt;/code&gt;&lt;/a&gt; 命令下载并运行 &lt;code&gt;docker:dind&lt;/code&gt; Docker 镜像：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container run \
  --name jenkins-docker \
  --rm \
  --detach \
  --privileged \
  --network jenkins \
  --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 2376:2376 \
  docker:dind
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name jenkins-docker&lt;/code&gt;：（可选）指定用于运行镜像的 Docker 容器名称。默认情况下，Docker 将为容器生成一个唯一的名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;：（可选）关闭时自动删除 Docker 容器（Docker 镜像的实例）。它包含当被下面描述的 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器调用时 Docker 使用的 Docker 镜像缓存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--detach&lt;/code&gt;：（可选）在后台运行 Docker 容器。此实例可以稍后通过运行 &lt;code&gt;docker container stop jenkins-docker&lt;/code&gt; 停止，并可以通过 &lt;code&gt;docker container start jenkins-docker&lt;/code&gt; 再次启动。有关更多容器管理命令，请参阅 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container/&#34;&gt;&lt;code&gt;docker container&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--privileged&lt;/code&gt;：当前在 Docker 中运行 Docker 需要特权访问才能正常运行。使用较新的 Linux 内核版本可以放宽此要求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--network jenkins&lt;/code&gt;：这对应于先前步骤中创建的网络。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--network-alias docker&lt;/code&gt;：使 Docker 容器中的 Docker 在 &lt;code&gt;jenkins&lt;/code&gt; 网络中作为主机名 &lt;code&gt;docker&lt;/code&gt; 可用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--env DOCKER_TLS_CERTDIR=/certs&lt;/code&gt;：在 Docker 服务器中启用 TLS 的使用。由于使用了特权容器，因此建议这样做，尽管它需要使用下面描述的共享存储卷。此环境变量控制被管理的 Docker TLS 证书的根目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--volume jenkins-docker-certs:/certs/client&lt;/code&gt;：将容器内的 &lt;code&gt;/certs/client&lt;/code&gt; 目录映射到上面创建的名为 &lt;code&gt;jenkins-docker-certs&lt;/code&gt; 的 Docker 存储卷。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--volume jenkins-data:/var/jenkins_home&lt;/code&gt;：将容器内的 &lt;code&gt;/var/jenkins_home&lt;/code&gt; 目录映射到上面创建的名为 &lt;code&gt;jenkins-data&lt;/code&gt; 的Docker 存储卷。这将允许此 Docker容器中的 Docker 守护程序控制的其他 Docker 容器从 Jenkins 装载数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--publish 2376:2376&lt;/code&gt;：（可选）公开主机上的 Docker 守护程序端口。这对于在主机上执行 &lt;code&gt;docker&lt;/code&gt; 命令来控制此内部 Docker 守护程序很有用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker:dind&lt;/code&gt;：&lt;code&gt;docker:dind&lt;/code&gt; 镜像本身。可以使用以下命令在运行之前下载此映像：&lt;code&gt;docker image pull docker:dind&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 映像，并使用以下 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_run/&#34;&gt;&lt;code&gt;docker container run&lt;/code&gt;&lt;/a&gt; 命令将其作为容器在 Docker 中运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container run \
  --name jenkins-blueocean \
  --rm \
  --detach \
  --network jenkins \
  --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client \
  --env DOCKER_TLS_VERIFY=1 \
  --publish 8080:8080 \
  --publish 50000:50000 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  jenkinsci/blueocean
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name jenkins-blueocean&lt;/code&gt;：（可选）为 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; Docker 镜像的此实例指定 Docker 容器名称。这使得后续的 &lt;code&gt;docker container&lt;/code&gt; 命令更易于引用它。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;：（可选）关闭时自动删除 Docker 容器（这是下面的 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 镜像的实例）。如果您需要退出 Jenkins，这可以保持整洁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--detach&lt;/code&gt;：（可选）在后台运行 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器（即“detached”模式）并输出容器 ID。如果未指定此选项，则在终端窗口中输出此容器的运行中的 Docker 日志。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--network jenkins&lt;/code&gt;：将此容器连接到先前步骤中定义的 &lt;code&gt;jenkins&lt;/code&gt; 网络。这使得上一步中的 Docker 守护程序可以通过主机名 &lt;code&gt;docker&lt;/code&gt; 应用于此 Jenkins 容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--env DOCKER_HOST=tcp://docker:2376&lt;/code&gt;：指定 &lt;code&gt;docker&lt;/code&gt;、 &lt;code&gt;docker-compose&lt;/code&gt; 和其他 Docker 工具用于连接上一步中的 Docker 守护程序的环境变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--publish 8080:8080&lt;/code&gt;：将 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器的端口 8080映射（即“发布”）到主机上的端口 8080。第一个数字表示主机上的端口，而最后一个数字表示容器的端口。因此，如果为该选项指定 &lt;code&gt;-p 49000:8080&lt;/code&gt;，则将通过主机上的端口 49000 访问 Jenkins。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--publish 50000:50000&lt;/code&gt;：（可选）将 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器的端口 50000 映射到主机上的端口 50000。仅当您在其他计算机上设置了一个或多个基于 JNLP 的 Jenkins 代理时才需要这样做，这些代理又与 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器（充当“master” Jenkins服务器，或仅充当“ Jenkins master服务器”）交互。基于 JNLP 的 Jenkins 代理默认情况下通过 TCP 端口 50000 与 Jenkins master 服务器通信。您可以通过 &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/security/&#34;&gt;Configure Global Security&lt;/a&gt; 页面在 Jenkins master 服务器上更改此端口号。如果要将 JNLP 代理程序的 Jenkins master 服务器的 TCP 端口更改为 51000（例如），则需要重新运行 Jenkins（通过此 &lt;code&gt;docker run …&lt;/code&gt; 命令），并使用以下命令指定此 &amp;ldquo;publish&amp;rdquo; 选项 &lt;code&gt;--publish 52000:51000&lt;/code&gt;，其中最后一个值与 Jenkins 主服务器上更改后的值匹配，并且第一个值是 Jenkins master 服务器主机上的端口号，基于 JNLP 的 Jenkins 代理通过其通信（与 Jenkins master 服务器） - 即 52000。请注意，Jenkins 2.217 中的 WebSocket 代理不需要此配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--volume jenkins-data:/var/jenkins_home&lt;/code&gt;：将容器中的 &lt;code&gt;/var/jenkins_home&lt;/code&gt; 目录映射到名称为 &lt;code&gt;jenkins-data&lt;/code&gt; 的 Docker &lt;a href=&#34;https://docs.docker.com/engine/admin/volumes/volumes/&#34;&gt;volume&lt;/a&gt;。除了将 &lt;code&gt;/var/jenkins_home&lt;/code&gt; 目录映射到 Docker 存储卷之外，您还可以将此目录映射到计算机本地文件系统上的目录。例如，指定选项 &lt;code&gt;--volume $HOME/jenkins:/var/jenkins_home&lt;/code&gt; 会将容器的 &lt;code&gt;/var/jenkins_home&lt;/code&gt; 目录映射到本地计算机上 &lt;code&gt;$HOME&lt;/code&gt; 目录中的 &lt;code&gt;jenkins&lt;/code&gt; 子目录，该目录通常是 &lt;code&gt;/Users/&amp;lt;your-username&amp;gt;/jenkins&lt;/code&gt;  或者 &lt;code&gt;/home/&amp;lt;your-username&amp;gt;/jenkins&lt;/code&gt;。请注意，如果您为此更改源存储卷或目录，则需要更新上述 &lt;code&gt;docker:dind&lt;/code&gt; 容器中的存储卷以匹配此卷。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--volume jenkins-docker-certs:/certs/client:ro&lt;/code&gt;：将 &lt;code&gt;/certs/client&lt;/code&gt; 目录映射到先前创建的 &lt;code&gt;jenkins-docker-certs&lt;/code&gt; 存储卷。这使连接到 Docker 守护程序所需的客户端 TLS 证书在  &lt;code&gt;DOCKER_CERT_PATH&lt;/code&gt; 环境变量指定的路径中可用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkinsci/blueocean&lt;/code&gt;：&lt;code&gt;jenkinsci/blueocean&lt;/code&gt; Docker 镜像本身。如果尚未下载该镜像，则此 &lt;code&gt;docker container run&lt;/code&gt; 命令将自动为您下载该镜像。此外，如果自上次运行此命令以来已发布了对该镜像的任何更新，则再次运行该命令将自动为您下载这些发布的镜像更新。**注意：**也可以使用 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/image_pull/&#34;&gt;&lt;code&gt;docker image pull&lt;/code&gt;&lt;/a&gt; 命令独立下载（或更新）此 Docker 镜像：&lt;code&gt;docker image pull jenkinsci/blueocean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续进行 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#setup-wizard&#34;&gt;Post-installation setup wizard&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;在-windows-上&#34;&gt;在 Windows 上&lt;/h5&gt;
&lt;p&gt;Jenkins 项目提供 Linux 容器镜像，而不是 Windows 容器镜像。确保将 Docker for Windows 安装配置为运行 &lt;code&gt;Linux Containers&lt;/code&gt; 而不是 &lt;code&gt;Windows Containers&lt;/code&gt;。请参阅 Docker 文档以获取 &lt;a href=&#34;https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers&#34;&gt;switch to Linux containers&lt;/a&gt; 的说明。配置为运行 &lt;code&gt;Linux Containers&lt;/code&gt; 后，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开命令提示符窗口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下 &lt;code&gt;docker network create&lt;/code&gt; 命令在 Docker 中创建 &lt;a href=&#34;https://docs.docker.com/network/bridge/&#34;&gt;桥接网络&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker network create jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下 &lt;code&gt;docker volume create&lt;/code&gt; 命令创建以下存储卷，这些存储卷用来共享连接到 Docker 守护程序所需的 Docker 客户端 TLS 证书，和持久化 Jenkins 数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker volume create jenkins-docker-certs
docker volume create jenkins-data
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了在 Jenkins 节点内执行 Docker 命令，请使用以下 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_run/&#34;&gt;&lt;code&gt;docker container run&lt;/code&gt;&lt;/a&gt; 命令下载并运行 &lt;code&gt;docker:dind&lt;/code&gt; Docker 镜像：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container run --name jenkins-docker --rm --detach ^
  --privileged --network jenkins --network-alias docker ^
  --env DOCKER_TLS_CERTDIR=/certs ^
  --volume jenkins-docker-certs:/certs/client ^
  --volume jenkins-data:/var/jenkins_home ^
  docker:dind
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 映像，并使用以下 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_run/&#34;&gt;&lt;code&gt;docker container run&lt;/code&gt;&lt;/a&gt; 命令将其作为容器在 Docker 中运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container run --name jenkins-blueocean --rm --detach ^
  --network jenkins --env DOCKER_HOST=tcp://docker:2376 ^
  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 ^
  --volume jenkins-data:/var/jenkins_home ^
  --volume jenkins-docker-certs:/certs/client:ro ^
  --publish 8080:8080 --publish 50000:50000 jenkinsci/blueocean
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关每个选项的说明，请参阅上面的 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#on-macos-and-linux&#34;&gt;macOS and Linux&lt;/a&gt; 说明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续进行 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#setup-wizard&#34;&gt;Post-installation setup wizard&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;访问-jenkinsblue-ocean-docker-容器&#34;&gt;访问 Jenkins/Blue Ocean Docker 容器&lt;/h4&gt;
&lt;p&gt;如果您有使用 Docker 的经验，并且希望或需要使用 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_exec/&#34;&gt;&lt;code&gt;docker container exec&lt;/code&gt;&lt;/a&gt; 命令通过终端/命令提示符访问 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器，您可以添加 &lt;code&gt;--name jenkins-blueocean&lt;/code&gt; 之类的选项（在上面的 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_run/&#34;&gt;&lt;code&gt;docker container run&lt;/code&gt;&lt;/a&gt; 中），它将为 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器命名为 “jenkins-blueocean”。&lt;/p&gt;
&lt;p&gt;这意味着您可以使用如下类似的 &lt;code&gt;docker container exec&lt;/code&gt; 命令（通过单独的终端/命令提示符窗口）访问容器：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container exec -it jenkins-blueocean bash
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;通过-docker-日志访问-jenkins-控制台日志&#34;&gt;通过 Docker 日志访问 Jenkins 控制台日志&lt;/h4&gt;
&lt;p&gt;您可能需要访问 Jenkins 控制台日志。例如，在 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#unlocking-jenkins&#34;&gt;Unlocking Jenkins&lt;/a&gt; 作为 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#setup-wizard&#34;&gt;Post-installation setup wizard&lt;/a&gt; 的一部分时。&lt;/p&gt;
&lt;p&gt;如果您没有在 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#downloading-and-running-jenkins-in-docker&#34;&gt;上面&lt;/a&gt; 的 &lt;code&gt;docker container run …&lt;/code&gt; 命令中指定分离模式选项 &lt;code&gt;--detach&lt;/code&gt;，那么可以通过运行该 Docker 命令的终端/命令提示符窗口轻松访问 Jenkins 控制台日志。&lt;/p&gt;
&lt;p&gt;否则，您可以使用以下命令通过 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器的 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_logs/&#34;&gt;Docker logs&lt;/a&gt; 访问 Jenkins 控制台日志：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container logs &amp;lt;docker-container-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您的 &lt;code&gt;&amp;lt;docker-container-name&amp;gt;&lt;/code&gt; 可以使用 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_ls/&#34;&gt;&lt;code&gt;docker container ls&lt;/code&gt;&lt;/a&gt; 命令获取。如果您在上面的 &lt;code&gt;docker container run …&lt;/code&gt; 命令中指定了 &lt;code&gt;--name jenkins-blueocean&lt;/code&gt; 选项（另请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#accessing-the-jenkins-blue-ocean-docker-container&#34;&gt;访问 Jenkins/Blue Ocean Docker 容器&lt;/a&gt;），您可以简单地使用 &lt;code&gt;docker container logs&lt;/code&gt; 命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container logs jenkins-blueocean
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;访问-jenkins-家目录&#34;&gt;访问 Jenkins 家目录&lt;/h4&gt;
&lt;p&gt;您可能需要访问 Jenkins 家目录。例如，在 &lt;code&gt;workspace&lt;/code&gt; 子目录中检查 Jenkins 构建的详细信息。&lt;/p&gt;
&lt;p&gt;如果您将 Jenkins 家目录（&lt;code&gt;/var/jenkins_home&lt;/code&gt;）映射到计算机的本地文件系统上的目录（即，在 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#downloading-and-running-jenkins-in-docker&#34;&gt;上面&lt;/a&gt; 的 &lt;code&gt;docker container run …&lt;/code&gt; 命令），那么您可以通过计算机的常规终端/命令提示符访问该目录的内容。&lt;/p&gt;
&lt;p&gt;除此之外，如果您在 &lt;code&gt;docker container run …&lt;/code&gt; 命令中指定了 &lt;code&gt;--volume jenkins-data:/var/jenkins_home&lt;/code&gt; 选项，您可以使用 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_exec/&#34;&gt;&lt;code&gt;docker container exec&lt;/code&gt;&lt;/a&gt; 命令通过 &lt;code&gt;jenkinsci/blueocean&lt;/code&gt; 容器的终端/命令提示符访问 Jenkins 家目录的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container exec -it &amp;lt;docker-container-name&amp;gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#accessing-the-jenkins-console-log-through-docker-logs&#34;&gt;如上所述&lt;/a&gt;，您的 &lt;code&gt;&amp;lt;docker-container-name&amp;gt;&lt;/code&gt; 可以使用 &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/container_ls/&#34;&gt;&lt;code&gt;docker container ls&lt;/code&gt;&lt;/a&gt; 命令获取。如果您在上面的 &lt;code&gt;docker container run …&lt;/code&gt; 命令中指定了 &lt;code&gt;--name jenkins-blueocean&lt;/code&gt; 选项（另请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#accessing-the-jenkins-blue-ocean-docker-container&#34;&gt;访问 Jenkins/Blue Ocean Docker 容器&lt;/a&gt;），您可以简单地使用 &lt;code&gt;docker container exec&lt;/code&gt; 命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container exec -it jenkins-blueocean bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;post-installation-setup-wizard&#34;&gt;Post-installation setup wizard&lt;/h2&gt;
&lt;p&gt;After downloading, installing and running Jenkins using one of the procedures above, the post-installation setup wizard begins.&lt;/p&gt;
&lt;p&gt;This setup wizard takes you through a few quick &amp;ldquo;one-off&amp;rdquo; steps to unlock Jenkins, customize it with plugins and create the first administrator user through which you can continue accessing Jenkins.&lt;/p&gt;
&lt;h3 id=&#34;unlocking-jenkins&#34;&gt;Unlocking Jenkins&lt;/h3&gt;
&lt;p&gt;When you first access a new Jenkins instance, you are asked to unlock it using an automatically-generated password.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Browse to &lt;code&gt;http://localhost:8080&lt;/code&gt; (or whichever port you configured for Jenkins when installing it) and wait until the &lt;strong&gt;Unlock Jenkins&lt;/strong&gt; page appears.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.jenkins.io/doc/book/resources/tutorials/setup-jenkins-01-unlock-jenkins-page.jpg&#34; alt=&#34;Unlock Jenkins page&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the Jenkins console log output, copy the automatically-generated alphanumeric password (between the 2 sets of asterisks).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.jenkins.io/doc/book/resources/tutorials/setup-jenkins-02-copying-initial-admin-password.png&#34; alt=&#34;Copying initial admin password&#34;&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The command: &lt;code&gt;sudo cat /var/lib/jenkins/secrets/initialAdminPassword&lt;/code&gt; will print the password at console.&lt;/li&gt;
&lt;li&gt;If you are running Jenkins in Docker using the official &lt;code&gt;jenkins/jenkins&lt;/code&gt; image you can use &lt;code&gt;sudo docker exec ${CONTAINER_ID or CONTAINER_NAME} cat /var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt; to print the password in the console without having to exec into the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the &lt;strong&gt;Unlock Jenkins&lt;/strong&gt; page, paste this password into the &lt;strong&gt;Administrator password&lt;/strong&gt; field and click &lt;strong&gt;Continue&lt;/strong&gt;.
&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you ran Jenkins in Docker in detached mode, you can access the Jenkins console log from the Docker logs (&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#accessing-the-jenkins-console-log-through-docker-logs&#34;&gt;above&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The Jenkins console log indicates the location (in the Jenkins home directory) where this password can also be obtained. This password must be entered in the setup wizard on new Jenkins installations before you can access Jenkins’s main UI. This password also serves as the default admininstrator account’s password (with username &amp;ldquo;admin&amp;rdquo;) if you happen to skip the subsequent user-creation step in the setup wizard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;customizing-jenkins-with-plugins&#34;&gt;Customizing Jenkins with plugins&lt;/h3&gt;
&lt;p&gt;After &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#unlocking-jenkins&#34;&gt;unlocking Jenkins&lt;/a&gt;, the &lt;strong&gt;Customize Jenkins&lt;/strong&gt; page appears. Here you can install any number of useful plugins as part of your initial setup.&lt;/p&gt;
&lt;p&gt;Click one of the two options shown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install suggested plugins&lt;/strong&gt; - to install the recommended set of plugins, which are based on most common use cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select plugins to install&lt;/strong&gt; - to choose which set of plugins to initially install. When you first access the plugin selection page, the suggested plugins are selected by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are not sure what plugins you need, choose &lt;strong&gt;Install suggested plugins&lt;/strong&gt;. You can install (or remove) additional Jenkins plugins at a later point in time via the &lt;a href=&#34;https://www.jenkins.io/doc/book/managing&#34;&gt;&lt;strong&gt;Manage Jenkins&lt;/strong&gt;&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/plugins/&#34;&gt;&lt;strong&gt;Manage Plugins&lt;/strong&gt;&lt;/a&gt; page in Jenkins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The setup wizard shows the progression of Jenkins being configured and your chosen set of Jenkins plugins being installed. This process may take a few minutes.&lt;/p&gt;
&lt;h3 id=&#34;creating-the-first-administrator-user&#34;&gt;Creating the first administrator user&lt;/h3&gt;
&lt;p&gt;Finally, after &lt;a href=&#34;https://www.jenkins.io/doc/book/installing/#customizing-jenkins-with-plugins&#34;&gt;customizing Jenkins with plugins&lt;/a&gt;, Jenkins asks you to create your first administrator user.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the &lt;strong&gt;Create First Admin User&lt;/strong&gt; page appears, specify the details for your administrator user in the respective fields and click &lt;strong&gt;Save and Finish&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When the &lt;strong&gt;Jenkins is ready&lt;/strong&gt; page appears, click &lt;strong&gt;Start using Jenkins&lt;/strong&gt;.
&lt;strong&gt;Notes:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This page may indicate &lt;strong&gt;Jenkins is almost ready!&lt;/strong&gt; instead and if so, click &lt;strong&gt;Restart&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the page does not automatically refresh after a minute, use your web browser to refresh the page manually.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If required, log in to Jenkins with the credentials of the user you just created and you are ready to start using Jenkins!&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;From this point on, the Jenkins UI is only accessible by providing valid username and password credentials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;offline-jenkins-installation&#34;&gt;Offline Jenkins Installation&lt;/h2&gt;
&lt;p&gt;This section describes how to install Jenkins on a machine that does not have an internet connection.&lt;/p&gt;
&lt;p&gt;To install Jenkins itself, download the appropriate war file and transfer it to your machine.&lt;/p&gt;
&lt;p&gt;Plugins are a different matter, due to dependency requirements.&lt;/p&gt;
&lt;p&gt;The recommended approach is to use &lt;a href=&#34;https://github.com/jenkinsci/plugin-installation-manager-tool&#34;&gt;Plugin Installation Manager Tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to transfer the individual plugins, you’ll need to retrieve all dependencies as well. There are several dependency retrieval scripts and tools on Github. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkinsci/docker/blob/master/install-plugins.sh&#34;&gt;install-plugins.sh&lt;/a&gt; - Bash script for managing plugins from the official Docker image for Jenkins&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/samrocketman/jenkins-bootstrap-shared&#34;&gt;samrocketman/jenkins-bootstrap-shared&lt;/a&gt; - Java is required; packages Jenkins and plugins into an immutable package installer. Supported formats include: RPM, DEB, Docker. Can proxy Jenkins and plugins through Nexus or Artifactory since Gradle is used to assemble plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jenkins-parameters&#34;&gt;Jenkins Parameters&lt;/h2&gt;
&lt;p&gt;Jenkins initialization can also be controlled by run time parameters passed as arguments. Command line arguments can adjust networking, security, monitoring, and other settings.&lt;/p&gt;
&lt;h3 id=&#34;networking-parameters&#34;&gt;Networking parameters&lt;/h3&gt;
&lt;p&gt;Jenkins networking configuration is generally controlled by command line arguments. The networking configuration areguments are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command Line Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--httpPort=$HTTP_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs Jenkins listener on port $HTTP_PORT using standard &lt;em&gt;http&lt;/em&gt; protocol. The default is port 8080. To disable (because you’re using &lt;em&gt;https&lt;/em&gt;), use port &lt;code&gt;-1&lt;/code&gt;. This option does not impact the root URL being generated within Jenkins logic (UI, JNLP files, etc.). It is defined by the Jenkins URL specified in the global configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--httpListenAddress=$HTTP_HOST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binds Jenkins to the IP address represented by $HTTP_HOST. The default is 0.0.0.0 — i.e. listening on all available interfaces. For example, to only listen for requests from localhost, you could use: &lt;code&gt;--httpListenAddress=127.0.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--httpsPort=$HTTPS_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Uses HTTPS protocol on port $HTTPS_PORT. This option does not impact the root URL being generated within Jenkins logic (UI, JNLP files, etc.). It is defined by the Jenkins URL specified in the global configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--httpsListenAddress=$HTTPS_HOST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binds Jenkins to listen for HTTPS requests on the IP address represented by $HTTPS_HOST.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--http2Port=$HTTP_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Uses HTTP/2 protocol on port $HTTP_PORT. This option does not impact the root URL being generated within Jenkins logic (UI, JNLP files, etc.). It is defined by the Jenkins URL specified in the global configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--http2ListenAddress=$HTTPS_HOST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binds Jenkins to listen for HTTP/2 requests on the IP address represented by $HTTPS_HOST.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--prefix=$PREFIX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs Jenkins to include the $PREFIX at the end of the URL. For example, set &lt;em&gt;&amp;ndash;prefix=/jenkins&lt;/em&gt; to make Jenkins accessible at &lt;em&gt;http://myServer:8080/jenkins&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--ajp13Port=$AJP_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs Jenkins listener on port $AJP_PORT using standard &lt;em&gt;AJP13&lt;/em&gt; protocol. The default is port 8009. To disable (because you’re using &lt;em&gt;https&lt;/em&gt;), use port &lt;code&gt;-1&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--ajp13ListenAddress=$AJP_ADDR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binds Jenkins to the IP address represented by $AJP_HOST. The default is 0.0.0.0 — i.e. listening on all available interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--sessionTimeout=$TIMEOUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the http session timeout value to $SESSION_TIMEOUT minutes. Default to what webapp specifies, and then to 60 minutes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;miscellaneous-parameters&#34;&gt;Miscellaneous parameters&lt;/h3&gt;
&lt;p&gt;Other Jenkins initialization configuration is also controlled by command line arguments. The miscellaneous configuration arguments are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command Line Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--argumentsRealm.passwd.$USER=$PASS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Assigns the password for user $USER. If Jenkins security is enabled, you must log in as a user who has an &lt;em&gt;admin&lt;/em&gt; role to configure Jenkins.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--argumentsRealm.roles.$USER=admin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Assigns user $USER the admin role. The user can configure Jenkins even if security is enabled in Jenkins. See &lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration/security/&#34;&gt;Securing Jenkins&lt;/a&gt; for more information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--useJmx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable &lt;a href=&#34;https://www.eclipse.org/jetty/documentation/current/jmx-chapter.html&#34;&gt;Jetty Java Management Extension (JMX)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jenkins passes all command line parameters to the Winstone servlet container. More information about Jenkins Winstone command line parameters is available from the &lt;a href=&#34;https://github.com/jenkinsci/winstone#command-line-options&#34;&gt;Winstone Command Line Parameter Reference&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Be Careful with Command Line Parameters&lt;/strong&gt; Jenkins ignores command line parameters it doesn’t understand instead of producing an error. Be careful when using command line parameters and make sure you have the correct spelling. For example, the parameter needed for defining the Jenkins administrative user is &lt;code&gt;--argument**s**Realm&lt;/code&gt; and not &lt;code&gt;--argumentRealm&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;jenkins-properties&#34;&gt;Jenkins properties&lt;/h3&gt;
&lt;p&gt;Some Jenkins behaviors are configured with Java properties. Java properties are set from the command line that started Jenkins. Property assignments use the form &lt;code&gt;-DsomeName=someValue&lt;/code&gt; to assign the value &lt;code&gt;someValue&lt;/code&gt; to the property named &lt;code&gt;someName&lt;/code&gt;. For example, to assign the value &lt;code&gt;true&lt;/code&gt; to a property &lt;code&gt;testName&lt;/code&gt;, the command line argument would be &lt;code&gt;-DtestName=true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Refer to the detailed list of &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/system-properties/#Featurescontrolledbysystemproperties-PropertiesinJenkinsCore&#34;&gt;Jenkins properties&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;configuring-http&#34;&gt;Configuring HTTP&lt;/h2&gt;
&lt;h3 id=&#34;https-with-an-existing-certificate&#34;&gt;HTTPS with an existing certificate&lt;/h3&gt;
&lt;p&gt;If you’re setting up Jenkins using the built-in Winstone server and want to use an existing certificate for HTTPS:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--httpPort=-1 \
--httpsPort=443 \
--httpsKeyStore=path/to/keystore \
--httpsKeyStorePassword=keystorePassword
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The keystore should be in JKS format (as created by the JDK &amp;lsquo;keytool&amp;rsquo;) and the keystore and target key must have the same password. (Placing the keystore arguments after Jenkins-specific parameters does not seem to work; either they are not forwarded to Winstone or Winstone ignores them coming after unknown parameters. So, make sure they are adjacent to the working &lt;code&gt;--httpsPort&lt;/code&gt; argument.)&lt;/p&gt;
&lt;p&gt;If your keystore contains multiple certificates (e.g. you are using CA signed certificate) Jenkins might end-up using a incorrect one. In this case you can &lt;a href=&#34;http://stackoverflow.com/questions/7528944/convert-ca-signed-jks-keystore-to-pem&#34;&gt;convert the keystore to PEM&lt;/a&gt; and use following command line options:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--httpPort=-1 \
--httpsPort=443 \
--httpsCertificate=path/to/cert \
--httpsPrivateKey=path/to/privatekey
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;using-http2&#34;&gt;Using HTTP/2&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;HTTP/2 protocol&lt;/a&gt; allows web servers to reduce latency over encrypted connections by pipelining requests, multiplexing requests, and allowing servers to push in some cases before receiving a client request for the data. The Jetty server used by Jenkins supports HTTP/2 with the addition of the Application-Layer Protocol Negotiation (ALPN) TLS extension. The ALPN TLS extension is connected to the specific Jetty version and has specific requirements depending on the Java version.&lt;/p&gt;
&lt;h4 id=&#34;java-11-java-8u252-and-later&#34;&gt;Java 11, Java 8u252, and later&lt;/h4&gt;
&lt;p&gt;Java 11, Java 8 update 252 and Java 8 versions after update 252 can run the ALPN TLS extension by installing the Jetty ALPN java server jar and passing it as a java command line argument. Steps to install the extension are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the Jetty version included in your Jenkins server by searching the Jenkins startup log for the string &lt;code&gt;org.eclipse.jetty.server.Server#doStart&lt;/code&gt;. For example:
&lt;code&gt;org.eclipse.jetty.server.Server#doStart: jetty-9.4.27.v20200227&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Locate the Java version on the &amp;ldquo;System Information&amp;rdquo; page of &amp;ldquo;Manage Jenkins&amp;rdquo; to confirm it is Java 11 or 8u252 (or later)&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-alpn-java-server&#34;&gt;jetty-alpn-java-server&lt;/a&gt; with the version number matching the Jetty version bundled with your Jenkins version&lt;/li&gt;
&lt;li&gt;Place the jetty-alpn-java-server.jar file in a directory accessible to the JVM&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--extraLibFolder=/path/to/extra/lib/folder&lt;/code&gt; to the Java command line arguments that start Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java --extraLibFolder=/opt/java/jetty-alpn-java-server-9.4.27.v20200227.jar \
    -jar target/jenkins.war \
    --http2Port=9090
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;java-8u242-and-earlier&#34;&gt;Java 8u242 and earlier&lt;/h4&gt;
&lt;p&gt;Java 8 update 242 and earlier can run the ALPN TLS extension by installing the Jetty ALPN boot library corresponding to the &lt;em&gt;exact OpenJDK version&lt;/em&gt; you are using into the Java boot classpath. Steps to install the extension are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the Java version running your Jenkins server from the &amp;ldquo;Manage Jenkins&amp;rdquo; → &amp;ldquo;System Information&amp;rdquo; page&lt;/li&gt;
&lt;li&gt;Find the &lt;a href=&#34;https://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-versions&#34;&gt;boot library&lt;/a&gt; for your OpenJDK version&lt;/li&gt;
&lt;li&gt;Download the matching &lt;a href=&#34;https://repo1.maven.org/maven2/org/mortbay/jetty/alpn/alpn-boot/&#34;&gt;alpn-boot.jar&lt;/a&gt; file to a directory accessible to the JVM&lt;/li&gt;
&lt;li&gt;Add the alpn-boot.jar to the JVM boot classpath by adding &lt;code&gt;-Xbootclasspath/p:/path/to/alpn-boot.jar&lt;/code&gt; to the Java command line arguments that start Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -Xbootclasspath/p:/opt/java/alpn-boot-8.1.13.v20181017.jar \
    -jar target/jenkins.war \
    --http2Port=9090
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;https-certificates-with-windows&#34;&gt;HTTPS certificates with Windows&lt;/h3&gt;
&lt;p&gt;These instructions use a stock Jenkins installation on Windows Server. The instructions assume a certificate signed by a Certificate Authority such as Digicert. If you are making your own certificate skip steps 3, 4, and 5.&lt;/p&gt;
&lt;p&gt;This process utilizes Java’s keytool. Use the Java &lt;code&gt;keytool&lt;/code&gt; included with your Java installation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Create a new keystore on your server. This will place a &amp;lsquo;keystore&amp;rsquo; file in your current directory.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;keytool -genkeypair -keysize 2048 -keyalg RSA -alias jenkins -keystore keystore
Enter keystore password:
Re-enter new password:
What is your first and last name?
[Unknown]: server.example.com
What is the name of your organizational unit?
[Unknown]: A Unit
What is the name of your organization?
[Unknown]: A Company
What is the name of your City or Locality?
[Unknown]: A City
What is the name of your State or Province?
[Unknown]: A State
What is the two-letter country code for this unit?
[Unknown]: US
Is CN=server.example.com, OU=A Unit, O=A Company, L=A City, ST=A State, C=US correct?
[no]: yes

Enter key password for &amp;lt;jenkins&amp;gt;
(RETURN if same as keystore password):
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Verify the keystore was created (your fingerprint will vary)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;keytool -list -keystore keystore
Enter keystore password:

Keystore type: JKS
Keystore provider: SUN

Your keystore contains 1 entry

jenkins, May 6, 2015, PrivateKeyEntry,
Certificate fingerprint (SHA1): AA:AA:AA:AA:AA:AA:AA:AA:AA:AA ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Create the certificate request. This will create a &amp;lsquo;certreq.csr&amp;rsquo; file in your current directory.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;keytool -certreq -alias jenkins -keyalg RSA ^
-file certreq.csr ^
-ext SAN=dns:server-name,dns:server-name.your.company.com ^
-keystore keystore
Enter keystore password:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Use the contents of the &lt;code&gt;certreq.csr&lt;/code&gt; file to generate a certificate from your certificate provider. Request a SHA-1 certificate (SHA-2 is untested but will likely work). If using DigiCert, download the resulting certificate as Other format &amp;ldquo;a .p7b bundle of all the certs in a .p7b file&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Add the resulting .p7b into the keystore you created above.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;keytool -import ^
-alias jenkins ^
-trustcacerts ^
-file response_from_digicert.p7b ^
-keystore keystore
Enter keystore password:
Certificate reply was installed in keystore
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Copy the &amp;lsquo;keystore&amp;rsquo; file to your Jenkins secrets directory. On a stock installation, this will be at&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files (x86)\Jenkins\secrets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: Modify the &lt;arguments&gt; section of your &lt;code&gt;C:\Program Files (x86)\Jenkins\jenkins.xml&lt;/code&gt; file to reflect the new certificate. Note: This example disables http via &lt;code&gt;--httpPort=-1&lt;/code&gt; and places the server on &lt;code&gt;8443&lt;/code&gt; via &lt;code&gt;--httpsPort=8443&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;arguments&amp;gt;
  -Xrs
  -Xmx256m
  -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle
  -jar &amp;#34;%BASE%\jenkins.war&amp;#34;
  --httpPort=-1
  --httpsPort=8443
  --httpsKeyStore=&amp;#34;%BASE%\secrets\keystore&amp;#34;
  --httpsKeyStorePassword=your.password.here
&amp;lt;/arguments&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt;: Restart the jenkins service to initialize the new configuration.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net stop jenkins
net start jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 9&lt;/strong&gt;: After 30-60 seconds, Jenkins will have completed the startup process and you should be able to access the website at &lt;em&gt;&lt;a href=&#34;https://server.example.com:8443&#34;&gt;https://server.example.com:8443&lt;/a&gt;&lt;/em&gt;. Verify the certificate looks good via your browser’s tools. If the service terminates immediately, there’s an error somewhere in your configuration. Useful error information can be found in:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files (x86)\Jenkins\jenkins.err.log
C:\Program Files (x86)\Jenkins\jenkins.out.log
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: User Handbook Overview</title>
      <link>/docs/cicd/jenkins/user-handbook/overview/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/cicd/jenkins/user-handbook/overview/</guid>
      <description>
        
        
        &lt;h1 id=&#34;用户手册概述&#34;&gt;用户手册概述&lt;/h1&gt;
&lt;p&gt;此页面提供了《Jenkins 用户手册》中文档的概述。&lt;/p&gt;
&lt;p&gt;如果您想启动并运行 Jenkins，请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/installing&#34;&gt;安装 Jenkins&lt;/a&gt;，以获取有关如何在支持的所选平台上安装 Jenkins 的过程。&lt;/p&gt;
&lt;p&gt;如果您是典型的 Jenkins 用户（任何技能水平），并且想进一步了解 Jenkins 的用法，请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/using&#34;&gt;使用 Jenkins&lt;/a&gt;。另请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline&#34;&gt;Pipeline&lt;/a&gt; 和 &lt;a href=&#34;https://www.jenkins.io/doc/book/blueocean&#34;&gt;Blue Ocean&lt;/a&gt; 章节，以获有关这些 Jenkins 核心特性的更多信息。&lt;/p&gt;
&lt;p&gt;如果您是 Jenkins 管理员，并且想了解有关管理 Jenkins 节点和实例的更多信息，请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/managing&#34;&gt;管理 Jenkins&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果您是系统管理员，并且想学习如何备份、恢复和维护 Jenkins 服务器和节点，请参阅 &lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration&#34;&gt;Jenkins 系统管理&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
