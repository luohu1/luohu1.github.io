<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Website – Overview</title>
    <link>/docs/cloudnative/kubernetes/concepts/overview/</link>
    <description>Recent content in Overview on Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Jul 2020 16:34:21 +0800</lastBuildDate>
    
	  <atom:link href="/docs/cloudnative/kubernetes/concepts/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Kubernetes Components</title>
      <link>/docs/cloudnative/kubernetes/concepts/overview/kubenetes-components/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/overview/kubenetes-components/</guid>
      <description>
        
        
        &lt;p&gt;当你部署完 Kubernetes, 你就有了一个集群&lt;/p&gt;
&lt;p&gt;Kubernetes 集群由一组工作机器组成, 这些工作机器称为节点 nodes, 运行容器化应用程序. 每个集群至少有一个工作节点.&lt;/p&gt;
&lt;p&gt;工作节点托管 Pods. 控制平面管理集群中的工作节点和 Pods.&lt;/p&gt;
&lt;p&gt;Kubernetes 集群示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/7016517375d10c702489167e704dcb99e570df85/7bb53/images/docs/components-of-kubernetes.png&#34; alt=&#34;components-of-kubernetes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;控制平面组件control-plane-components&#34;&gt;控制平面组件(Control Plane Components)&lt;/h2&gt;
&lt;p&gt;控制平面组件可以运行在集群中的任何机器上. 然而, 为了简单, 设置脚本通常在同一台计算机上启动所有控制平面组件, 并且不在该计算机上运行用户容器.&lt;/p&gt;
&lt;h3 id=&#34;kube-apiserver&#34;&gt;kube-apiserver&lt;/h3&gt;
&lt;p&gt;暴露 Kubernetes API&lt;/p&gt;
&lt;h3 id=&#34;etcd&#34;&gt;etcd&lt;/h3&gt;
&lt;p&gt;所有集群数据的后端存储&lt;/p&gt;
&lt;h3 id=&#34;kube-scheduler&#34;&gt;kube-scheduler&lt;/h3&gt;
&lt;p&gt;监视新创建的还没有分配节点的Pod, 并选择一个节点使其运行&lt;/p&gt;
&lt;p&gt;调度决策要考虑的因素包括: 个人和集体资源需求, 硬件/软件/策略约束, 亲和力和反亲和力规范, 数据局限性, 工作负载之间的干扰以及期限.&lt;/p&gt;
&lt;h3 id=&#34;kube-controller-manager&#34;&gt;kube-controller-manager&lt;/h3&gt;
&lt;p&gt;运行控制器进程的控制平面组件&lt;/p&gt;
&lt;p&gt;从逻辑上讲, 每个控制器是一个单独的进程, 但是为了降低复杂性, 它们都被编译为单个二进制文件并在单个进程中运行.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node 控制器: 负责节点发生故障时的通知和响应&lt;/li&gt;
&lt;li&gt;Replication 控制器: 负责为系统中的每个 replication 控制器对象维护正确数量的 Pods&lt;/li&gt;
&lt;li&gt;Endpoints 控制器: 填充 Endpoints 对象(加入 Services &amp;amp; Pods)&lt;/li&gt;
&lt;li&gt;Service Account &amp;amp; Token 控制器: 为新的名称空间创建默认账户和API访问令牌&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloud-controller-manager&#34;&gt;cloud-controller-manager&lt;/h3&gt;
&lt;h2 id=&#34;node-components&#34;&gt;Node Components&lt;/h2&gt;
&lt;h3 id=&#34;kubelet&#34;&gt;kubelet&lt;/h3&gt;
&lt;p&gt;kubelet 获取一组 PodSpecs, 并确保这些 PodSpecs 中描述的容器是运行中和健康的&lt;/p&gt;
&lt;h3 id=&#34;kube-proxy&#34;&gt;kube-proxy&lt;/h3&gt;
&lt;p&gt;kube-proxy 维护节点上的网络规则. 这些网络规则允许从集群内部或外部的网络会话于 Pod 进行网络通信&lt;/p&gt;
&lt;p&gt;如果有一个操作系统数据包过滤层可用, kube-proxy 使用操作系统数据包过滤层, 否则, kube-proxy 自己转发流量.&lt;/p&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;Container runtime&lt;/h3&gt;
&lt;p&gt;Docker, containerd, CRI-O, 和 Kubernetes CRI 的任何实现&lt;/p&gt;
&lt;h2 id=&#34;插件addons&#34;&gt;插件(Addons)&lt;/h2&gt;
&lt;p&gt;插件使用 Kubernetes 资源实现集群功能. 因为它们提供集群级别的功能, 所以插件的命名空间资源属于&lt;code&gt;kube-system&lt;/code&gt; 命名空间&lt;/p&gt;
&lt;p&gt;可用插件的扩展列表, 请参见&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/addons/&#34;&gt;插件(Addons)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns&#34;&gt;DNS&lt;/h3&gt;
&lt;p&gt;为 Kubernetes 服务提供 DNS 记录&lt;/p&gt;
&lt;h3 id=&#34;web-ui-dashboard&#34;&gt;Web UI (Dashboard)&lt;/h3&gt;
&lt;p&gt;Dashboard 是 Kubernetes 集群的通用基于 Web 的 UI. 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除.&lt;/p&gt;
&lt;h3 id=&#34;containner-resource-monitoring&#34;&gt;Containner Resource Monitoring&lt;/h3&gt;
&lt;p&gt;容器资源监控将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中, 并提供用于浏览这些数据的界面&lt;/p&gt;
&lt;h3 id=&#34;cluster-level-logging&#34;&gt;Cluster-level Logging&lt;/h3&gt;
&lt;p&gt;集群层面日志机制负责将容器的日志数据保存到一个集中的日志存储中, 该存储能够提供搜索和浏览接口.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: What is Kubernetes?</title>
      <link>/docs/cloudnative/kubernetes/concepts/overview/what-is-kubernetes/</link>
      <pubDate>Thu, 23 Jul 2020 16:43:26 +0800</pubDate>
      
      <guid>/docs/cloudnative/kubernetes/concepts/overview/what-is-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 名字起源于希腊语, 意思是舵手或飞行员&lt;/p&gt;
&lt;h2 id=&#34;历史回顾&#34;&gt;历史回顾&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/26a177ede4d7b032362289c6fccd448fc4a91174/eb693/images/docs/container_evolution.svg&#34; alt=&#34;container_evolution&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;传统部署时代&#34;&gt;传统部署时代&lt;/h3&gt;
&lt;h3 id=&#34;虚拟化部署时代&#34;&gt;虚拟化部署时代&lt;/h3&gt;
&lt;h3 id=&#34;容器部署时代&#34;&gt;容器部署时代&lt;/h3&gt;
&lt;p&gt;容器带来的好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快的应用创建和部署: 使用容器镜像相比使用 VM 镜像更加简单和高效.&lt;/li&gt;
&lt;li&gt;持续开发, 集成和部署:&lt;/li&gt;
&lt;li&gt;开发和运维的关注点分离:&lt;/li&gt;
&lt;li&gt;可观察性不仅可以显示操作系统级别的信息和指标, 还可以显示应用的健康和其他信号.&lt;/li&gt;
&lt;li&gt;环境一致性:&lt;/li&gt;
&lt;li&gt;云和操作系统分发的可移植性&lt;/li&gt;
&lt;li&gt;以应用程序为中心的管理:&lt;/li&gt;
&lt;li&gt;松散耦合, 分布式, 弹性, 解放的微服务&lt;/li&gt;
&lt;li&gt;资源隔离&lt;/li&gt;
&lt;li&gt;资源利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么需要-kubernetes-和-kubernetes-可以做什么&#34;&gt;为什么需要 Kubernetes 和 Kubernetes 可以做什么&lt;/h2&gt;
&lt;p&gt;Kubernetes 提供的能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务发现和负载均衡&lt;/li&gt;
&lt;li&gt;存储编排&lt;/li&gt;
&lt;li&gt;自动部署和回滚&lt;/li&gt;
&lt;li&gt;自动 bin packing&lt;/li&gt;
&lt;li&gt;自我修复&lt;/li&gt;
&lt;li&gt;Secret 和配置管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-kubernetes-is-not&#34;&gt;What Kubernetes is not&lt;/h2&gt;
&lt;p&gt;Kubernetes 不是一个传统的, 包罗万象的PaaS系统. 由于 Kubernetes 运行在容器层面而不是硬件层面, 因此它提供了 PaaS 产品所共有的一些普遍适用的功能, 例如部署, 扩展, 负载均衡, 并允许用户集成他们的日志记录, 监控和报警解决方案.&lt;/p&gt;
&lt;p&gt;Kubernetes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不限制应用程序的类型: 无状态, 有状态和数据处理.&lt;/li&gt;
&lt;li&gt;不部署源代码, 也不构建应用程序&lt;/li&gt;
&lt;li&gt;不提供应用级别的服务作为内置服务, 例如中间件, 数据处理框架, 数据库, 缓存, 集群存储系统&lt;/li&gt;
&lt;li&gt;不指示日志记录, 监控和报警解决方案&lt;/li&gt;
&lt;li&gt;不提供也不要求配置语言/系统&lt;/li&gt;
&lt;li&gt;不提供也不采用任何全面的机器配置, 维护, 管理或自我修复系统&lt;/li&gt;
&lt;li&gt;Kubernetes 不仅仅是一个编排系统.  事实上, 它消除了编排的需要. 编排的技术定义是执行定义好的工作流程: 先做 A, 然后 B, 然后 C. 相反, Kubernetes 包含一组独立的, 可组合的控制进程, 这些控制过程连续地讲当前状态驱动到提供的期望状态. 它跟你如何从 A 到 C 的方式没有关系. 也不需要集中控制.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
